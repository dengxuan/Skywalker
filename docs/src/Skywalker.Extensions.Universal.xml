<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Skywalker.Extensions.Universal</name>
    </assembly>
    <members>
        <member name="T:Skywalker.Extensions.Collections.Generic.IPagedList`1">
            <summary>
            分页集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Skywalker.Extensions.Collections.Generic.IPagedList`1.TotalCount">
            <summary>
            总数据量
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Collections.Generic.ITypeList">
            <summary>
            A shortcut for <see cref="T:Skywalker.Extensions.Collections.Generic.ITypeList`1"/> to use object as base type.
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Collections.Generic.ITypeList`1">
            <summary>
            Extends <see cref="T:System.Collections.Generic.IList`1"/> to add restriction a specific base type.
            </summary>
            <typeparam name="TBaseType">Base Type of <see cref="T:System.Type"/>s in this list</typeparam>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.ITypeList`1.Add``1">
            <summary>
            Adds a type to list.
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.ITypeList`1.Contains``1">
            <summary>
            Checks if a type exists in the list.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.ITypeList`1.Remove``1">
            <summary>
            Removes a type from list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Skywalker.Extensions.Collections.Generic.NameValue`1">
            <summary>
            Can be used to store Name/Value (or Key/Value) pairs.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Collections.Generic.NameValue`1.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Collections.Generic.NameValue`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.NameValue`1.#ctor">
            <summary>
            Creates a new <see cref="T:Skywalker.Extensions.Collections.NameValue"/>.
            The <see cref="P:Skywalker.Extensions.Collections.Generic.NameValue`1.Name"/>  and the <see cref="P:Skywalker.Extensions.Collections.Generic.NameValue`1.Value"/> is null.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.NameValue`1.#ctor(System.String,`0)">
            <summary>
            Creates a new <see cref="T:Skywalker.Extensions.Collections.NameValue"/>.
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Collections.Generic.PagedList`1">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Collections.Generic.PagedList`1.TotalCount">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Collections.Generic.TypeList">
            <summary>
            A shortcut for <see cref="T:Skywalker.Extensions.Collections.Generic.TypeList`1"/> to use object as base type.
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Collections.Generic.TypeList`1">
            <summary>
            Extends <see cref="T:System.Collections.Generic.List`1"/> to add restriction a specific base type.
            </summary>
            <typeparam name="TBaseType">Base Type of <see cref="T:System.Type"/>s in this list</typeparam>
        </member>
        <member name="P:Skywalker.Extensions.Collections.Generic.TypeList`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Skywalker.Extensions.Collections.Generic.TypeList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Skywalker.Extensions.Collections.Generic.TypeList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> at the specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.#ctor">
            <summary>
            Creates a new <see cref="T:Skywalker.Extensions.Collections.Generic.TypeList`1"/> object.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.Add``1">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.Add(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.Insert(System.Int32,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.IndexOf(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.Contains``1">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.Contains(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.Remove``1">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.Remove(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.CopyTo(System.Type[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Skywalker.Extensions.Collections.Generic.TypeList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Skywalker.Extensions.Collections.NamedTypeSelector">
            <summary>
            Used to represent a named type selector.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Collections.NamedTypeSelector.Name">
            <summary>
            Name of the selector.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Collections.NamedTypeSelector.Predicate">
            <summary>
            Predicate.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Collections.NamedTypeSelector.#ctor(System.String,System.Func{System.Type,System.Boolean})">
            <summary>
            Creates new <see cref="T:Skywalker.Extensions.Collections.NamedTypeSelector"/> object.
            </summary>
            <param name="name">Name</param>
            <param name="predicate">Predicate</param>
        </member>
        <member name="T:Skywalker.Extensions.Collections.NameValue">
            <summary>
            Can be used to store Name/Value (or Key/Value) pairs.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Collections.NameValue.#ctor">
            <summary>
            Creates a new <see cref="T:Skywalker.Extensions.Collections.NameValue"/>.
            The <see cref="!:Name"/>  and the <see cref="!:Value"/> is null.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Collections.NameValue.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Skywalker.Extensions.Collections.NameValue"/>.
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Filters.BloomFilter">
            <summary>
            BloomFilter
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Filters.BloomFilter.s_keyedHashAlgorithm">
            <summary>
            The digest method is reused between instances
            </summary>
            <remarks>MD5 gives good enough accuracy in most circumstances. Change to SHA1 if it's needed</remarks>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
            Constructs an empty Bloom filter. The total length of the Bloom filter will be
            c*n.
            </summary>
            <param name="c">is the number of bits used per element.</param>
            <param name="n">is the expected number of elements the filter will contain.</param>
            <param name="k">is the number of hash functions used.</param>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an empty Bloom filter. The optimal number of hash functions (k) is estimated from the total size of the Bloom
            and the number of expected elements.
            </summary>
            <param name="bitSetSize">defines how many bits should be used in total for the filter.</param>
            <param name="expectedNumberOElements">defines the maximum number of elements the filter is expected to contain.</param>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs an empty Bloom filter with a given false positive probability. The number of bits per
            element and the number of hash functions is estimated
            to match the false positive probability.
            </summary>
            <param name="falsePositiveProbability">is the desired false positive probability.</param>
            <param name="expectedNumberOfElements">is the expected number of elements in the Bloom filter.</param>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.BitArray)">
            <summary>
            Construct a new Bloom filter based on existing Bloom filter data.
            </summary>
            <param name="bitSetSize">defines how many bits should be used for the filter.</param>
            <param name="expectedNumberOfFilterElements">defines the maximum number of elements the filter is expected to contain.</param>
            <param name="actualNumberOfFilterElements">specifies how many elements have been inserted into the <code>filterData</code> BitArray.</param>
            <param name="filterData">a BitArray representing an existing Bloom filter.</param>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.CreateHash(System.String,System.Text.Encoding)">
            <summary>
            Generates a digest based on the contents of a string.
            </summary>
            <param name="val">specifies the input data.</param>
            <param name="charset">specifies the encoding of the input data.</param>
            <returns>digest as long.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.CreateHash(System.String)">
            <summary>
            Generates a digest based on the contents of a string.
            </summary>
            <param name="val">specifies the input data. The encoding is expected to be UTF-8.</param>
            <returns>digest as long.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.CreateHash(System.Byte[])">
            <summary>
            Generates a digest based on the contents of an array of bytes.
            </summary>
            <param name="data">specifies input data.</param>
            <returns>digest as long.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.CreateHashes(System.Byte[],System.Int32)">
            <summary>
            Generates digests based on the contents of an array of bytes and splits the result into 4-byte int's and store them in an array. The
            digest function is called until the required number of int's are produced. For each call to digest a salt
            is prepended to the data. The salt is increased by 1 for each call.
            </summary>
            <param name="data">specifies input data</param>
            <param name="hashes">number of hashes/int's to produce</param>
            <returns>array of int-sized hashes</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.Equals(System.Object)">
            <summary>
            Compares the contents of two instances to see if they are equal.
            </summary>
            <param name="obj">is the object to compare to.</param>
            <returns>True if the contents of the objects are equal.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.GetHashCode">
            <summary>
            Calculates a hash code for this class.
            <remarks>performance concerns : note that we read all the bits of bitset to compute the hash</remarks>
            <returns>hash code representing the contents of an instance of this class.</returns>
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.ExpectedFalsePositiveProbability">
            <summary>
            Calculates the expected probability of false positives based on
            the number of expected filter elements and the size of the Bloom filter.
            <br /><br />
            The value returned by this method is the <i>expected</i> rate of false
            positives, assuming the number of inserted elements equals the number of
            expected elements. If the number of elements in the Bloom filter is less
            than the expected value, the true probability of false positives will be lower.
            </summary>
            <returns>expected probability of false positives.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.GetFalsePositiveProbability(System.Double)">
            <summary>
            Calculate the probability of a false positive given the specified
            number of inserted elements.
            </summary>
            <param name="numberOfElements">number of inserted elements.</param>
            <returns>probability of a false positive.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.GetFalsePositiveProbability">
            <summary>
            Get the current probability of a false positive. The probability is calculated from
            the size of the Bloom filter and the current number of elements added to it.
            </summary>
            <returns>probability of false positives.</returns>
        </member>
        <member name="P:Skywalker.Extensions.Filters.BloomFilter.K">
            <summary>
            Returns the value chosen for K.<br />
            <br />
            K is the optimal number of hash functions based on the size
            of the Bloom filter and the expected number of inserted elements.
            </summary>
            <returns>optimal k.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.Clear">
            <summary>
            Sets all bits to false in the Bloom filter.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.Add(System.Object)">
            <summary>
            Adds an object to the Bloom filter. The output from the object's
            ToString() method is used as input to the hash functions.
            </summary>
            <param name="element">is an element to register in the Bloom filter.</param>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.Add(System.Byte[])">
            <summary>
            Adds an array of bytes to the Bloom filter.
            </summary>
            <param name="bytes">array of bytes to add to the Bloom filter.</param>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.AddAll(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds all elements from a Collection to the Bloom filter.
            </summary>
            <param name="c">Collection of elements.</param>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.AddAll(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Adds all elements from a Collection to the Bloom filter.
            </summary>
            <param name="c">Collection of elements.</param>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.Contains(System.Object)">
            <summary>
            Returns true if the element could have been inserted into the Bloom filter.
            Use getFalsePositiveProbability() to calculate the probability of this
            being correct.
            </summary>
            <param name="element">element to check.</param>
            <returns>true if the element could have been inserted into the Bloom filter.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.Contains(System.Byte[])">
            <summary>
            Returns true if the array of bytes could have been inserted into the Bloom filter.
            Use getFalsePositiveProbability() to calculate the probability of this
            being correct.
            </summary>
            <param name="bytes">array of bytes to check.</param>
            <returns>true if the array could have been inserted into the Bloom filter.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.ContainsAll(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Returns true if all the elements of a Collection could have been inserted
            into the Bloom filter. Use getFalsePositiveProbability() to calculate the
            probability of this being correct.
            </summary>
            <param name="c">elements to check.</param>
            <returns>true if all the elements in c could have been inserted into the Bloom filter.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.GetBit(System.Int32)">
            <summary>
            Read a single bit from the Bloom filter.
            </summary>
            <param name="bit">the bit to read.</param>
            <returns>true if the bit is set, false if it is not.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.SetBit(System.Int32,System.Boolean)">
            <summary>
            Set a single bit in the Bloom filter.
            </summary>
            <param name="bit">is the bit to set.</param>
            <param name="value">If true, the bit is set. If false, the bit is cleared.</param>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.GetBitSet">
            <summary>
            Return the bit set used to store the Bloom filter.
            </summary>
            <returns>bit set representing the Bloom filter.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.Size">
            <summary>
            Returns the number of bits in the Bloom filter. Use count() to retrieve
            the number of inserted elements.
            </summary>
            <returns>the size of the bitset used by the Bloom filter.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.Count">
            <summary>
            Returns the number of elements added to the Bloom filter after it
            was constructed or after clear() was called.
            </summary>
            <returns>number of elements added to the Bloom filter.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.GetExpectedNumberOfElements">
            <summary>
            Returns the expected number of elements to be inserted into the filter.
            This value is the same value as the one passed to the constructor.
            </summary>
            <returns>expected number of elements.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.GetExpectedBitsPerElement">
            <summary>
            Get expected number of bits per element when the Bloom filter is full. This value is set by the constructor
            when the Bloom filter is created. See also getBitsPerElement().
            </summary>
            <returns>expected number of bits per element.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.GetBitsPerElement">
            <summary>
            Get actual number of bits per element based on the number of elements that have currently been inserted and the length
            of the Bloom filter. See also getExpectedBitsPerElement().
            </summary>
            <returns>number of bits per element.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.HashBytes(System.Collections.BitArray)">
            <summary>
            Generate a hash value from an array of bits
            </summary>
            <remarks>voir http://blog.roblevine.co.uk for comparison of hash algorithm implementations</remarks>
            <param name="data">array of bits to hash</param>
            <returns></returns>
        </member>
        <member name="M:Skywalker.Extensions.Filters.BloomFilter.Equals(System.Collections.BitArray,System.Collections.BitArray)">
            <summary>
            Check if two arrays of bits are equals
            Returns true if every bit of this first array is equal to the corresponding bit of the second, false otherwise
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.AssemblyBuilderFactory.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
            <summary>
            Defines a dynamic assembly that has the specified name and access rights.
            </summary>
            <param name="name">The name of the assembly.</param>
            <param name="access">The access rights of the assembly.</param>
            <returns>An object that represents the new assembly.</returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider">
            <summary>
            The abstract DynamicLinqCustomTypeProvider which is used by the DefaultDynamicLinqCustomTypeProvider and can be used by a custom TypeProvider like in .NET Core.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider.FindTypesMarkedWithDynamicLinqTypeAttribute(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Finds the unique types marked with DynamicLinqTypeAttribute.
            </summary>
            <param name="assemblies">The assemblies to process.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider.ResolveType(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String)">
            <summary>
            Resolve any type which is registered in the current application domain.
            </summary>
            <param name="assemblies">The assemblies to inspect.</param>
            <param name="typeName">The typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider.ResolveTypeBySimpleName(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String)">
            <summary>
            Resolve a type by the simple name which is registered in the current application domain.
            </summary>
            <param name="assemblies">The assemblies to inspect.</param>
            <param name="simpleTypeName">The simple typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider.GetAssemblyTypesWithDynamicLinqTypeAttribute(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the assembly types annotated with <see cref="T:Skywalker.Extensions.Linq.CustomTypeProviders.DynamicLinqTypeAttribute"/> in an Exception friendly way.
            </summary>
            <param name="assemblies">The assemblies to process.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /></returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider">
             <summary>
             The default implementation for <see cref="T:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider"/>.
             
             Scans the current AppDomain for all types marked with <see cref="T:Skywalker.Extensions.Linq.CustomTypeProviders.DynamicLinqTypeAttribute"/>, and adds them as custom Dynamic Link types.
            
             Also provides functionality to resolve a Type in the current Application Domain.
            
             This class is used as default for full .NET Framework, so not for .NET Core
             </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Skywalker.Extensions.Linq.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider"/> class.
            </summary>
            <param name="cacheCustomTypes">Defines whether to cache the CustomTypes (including extension methods) which are found in the Application Domain. Default set to 'true'.</param>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.GetCustomTypes">
            <inheritdoc cref="M:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider.GetCustomTypes"/>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.GetExtensionMethods">
            <inheritdoc cref="M:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider.GetExtensionMethods"/>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.ResolveType(System.String)">
            <inheritdoc cref="M:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider.ResolveType(System.String)"/>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.ResolveTypeBySimpleName(System.String)">
            <inheritdoc cref="M:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider.ResolveTypeBySimpleName(System.String)"/>
        </member>
        <member name="T:Skywalker.Extensions.Linq.CustomTypeProviders.DynamicLinqTypeAttribute">
            <summary>
            Indicates to Dynamic Linq to consider the Type as a valid dynamic linq type.
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider">
            <summary>
            Interface for providing functionality to find custom types for or resolve any type.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider.GetCustomTypes">
            <summary>
            Returns a list of custom types that Skywalker.Extensions.Linq will understand.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1" /> list of custom types.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider.GetExtensionMethods">
            <summary>
            Returns a list of custom extension methods that Skywalker.Extensions.Linq will understand.
            </summary>
            <returns>A list of custom extension methods that Skywalker.Extensions.Linq will understand.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider.ResolveType(System.String)">
            <summary>
            Resolve any type by fullname which is registered in the current application domain.
            </summary>
            <param name="typeName">The typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider.ResolveTypeBySimpleName(System.String)">
            <summary>
            Resolve any type by the simple name which is registered in the current application domain.
            </summary>
            <param name="simpleTypeName">The typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.DefaultQueryableAnalyzer">
            <summary>
            Default implementation.
            </summary>
            <seealso cref="T:Skywalker.Extensions.Linq.IQueryableAnalyzer" />
        </member>
        <member name="M:Skywalker.Extensions.Linq.DefaultQueryableAnalyzer.SupportsLinqToObjects(System.Linq.IQueryable,System.Linq.IQueryProvider)">
            <inheritdoc cref="M:Skywalker.Extensions.Linq.IQueryableAnalyzer.SupportsLinqToObjects(System.Linq.IQueryable,System.Linq.IQueryProvider)"/>
        </member>
        <member name="T:Skywalker.Extensions.Linq.DynamicClass">
            <summary>
            Provides a base class for dynamic objects.
            
            In addition to the methods defined here, the following items are added using reflection:
            - default constructor
            - constructor with all the properties as parameters (if not linq-to-entities)
            - all properties (also with getter and setters)
            - ToString() method
            - Equals() method
            - GetHashCode() method
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicClass.GetDynamicPropertyValue``1(System.String)">
            <summary>
            Gets the dynamic property by name.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns>T</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicClass.GetDynamicPropertyValue(System.String)">
            <summary>
            Gets the dynamic property value by name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>value</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicClass.SetDynamicPropertyValue``1(System.String,``0)">
            <summary>
            Sets the dynamic property value by name.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicClass.SetDynamicPropertyValue(System.String,System.Object)">
            <summary>
            Sets the dynamic property value by name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Skywalker.Extensions.Linq.DynamicClass.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <value>The <see cref="T:System.Object"/>.</value>
            <param name="name">The name.</param>
            <returns>Value from the property.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicClass.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicClass.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicClass.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.DynamicClassFactory">
            <summary>
            A factory to create dynamic classes, based on <see href="http://stackoverflow.com/questions/29413942/c-sharp-anonymous-object-with-properties-from-dictionary" />.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicClassFactory.#cctor">
            <summary>
            Initializes the <see cref="T:Skywalker.Extensions.Linq.DynamicClassFactory"/> class.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicClassFactory.CreateType(System.Collections.Generic.IList{Skywalker.Extensions.Linq.DynamicProperty},System.Nullable{System.Boolean})">
            <summary>
            The CreateType method creates a new data class with a given set of public properties and returns the System.Type object for the newly created class. If a data class with an identical sequence of properties has already been created, the System.Type object for this class is returned.        
            Data classes implement private instance variables and read/write property accessors for the specified properties.Data classes also override the Equals and GetHashCode members to implement by-value equality.
            Data classes are created in an in-memory assembly in the current application domain. All data classes inherit from <see cref="T:Skywalker.Extensions.Linq.DynamicClass"/> and are given automatically generated names that should be considered private (the names will be unique within the application domain but not across multiple invocations of the application). Note that once created, a data class stays in memory for the lifetime of the current application domain. There is currently no way to unload a dynamically created data class.
            The dynamic expression parser uses the CreateClass methods to generate classes from data object initializers. This feature in turn is often used with the dynamic Select method to create projections.
            </summary>
            <param name="properties">The DynamicProperties</param>
            <param name="createParameterCtor">Create a constructor with parameters. Default set to true. Note that for Linq-to-Database objects, this needs to be set to false.</param>
            <returns>Type</returns>
            <example>
            <code>
            <![CDATA[
            DynamicProperty[] props = new DynamicProperty[] { new DynamicProperty("Name", typeof(string)), new DynamicProperty("Birthday", typeof(DateTime)) };
            Type type = DynamicClassFactory.CreateType(props);
            DynamicClass dynamicClass = Activator.CreateInstance(type) as DynamicClass;
            dynamicClass.SetDynamicProperty("Name", "Albert");
            dynamicClass.SetDynamicProperty("Birthday", new DateTime(1879, 3, 14));
            Console.WriteLine(dynamicClass);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicClassFactory.GenerateKey(System.Collections.Generic.IEnumerable{Skywalker.Extensions.Linq.DynamicProperty},System.Nullable{System.Boolean})">
            <summary>
            Generates the key.
            Anonymous classes are generics based. The generic classes are distinguished by number of parameters and name of parameters. The specific types of the parameters are the generic arguments.
            </summary>
            <param name="dynamicProperties">The dynamic propertys.</param>
            <param name="createParameterCtor">if set to <c>true</c> [create parameter ctor].</param>
            <returns></returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.DynamicEnumerableAsyncExtensions">
            <summary>
            Define async extensions on <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableAsyncExtensions.ToDynamicArrayAsync(System.Collections.IEnumerable,System.Type)">
            <summary>
            Async creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <param name="type">A <see cref="T:System.Type"/> cast to.</param>
            <returns>An Array that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableAsyncExtensions.ToDynamicArrayAsync(System.Collections.IEnumerable)">
            <summary>
            Async creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>An array that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableAsyncExtensions.ToDynamicArrayAsync``1(System.Collections.IEnumerable)">
            <summary>
            Async creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>An Array{T} that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableAsyncExtensions.ToDynamicListAsync(System.Collections.IEnumerable,System.Type)">
            <summary>
            Async creates a list of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <param name="type">A <see cref="T:System.Type"/> cast to.</param>
            <returns>An List that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableAsyncExtensions.ToDynamicListAsync(System.Collections.IEnumerable)">
            <summary>
            Async creates a list of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>A List that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableAsyncExtensions.ToDynamicListAsync``1(System.Collections.IEnumerable)">
            <summary>
            Async creates a list of dynamic objects from an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">Generic Type</typeparam>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>A List{T} that contains the elements from the input sequence.</returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.DynamicEnumerableExtensions">
            <summary>
            Define extensions on <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableExtensions.ToDynamicArray(System.Collections.IEnumerable)">
            <summary>
            Creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>An array that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableExtensions.ToDynamicArray``1(System.Collections.IEnumerable)">
            <summary>
            Creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>An Array{T} that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableExtensions.ToDynamicArray(System.Collections.IEnumerable,System.Type)">
            <summary>
            Creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <param name="type">A <see cref="T:System.Type"/> cast to.</param>
            <returns>An Array that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableExtensions.ToDynamicList(System.Collections.IEnumerable)">
            <summary>
            Creates a list of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>A List that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableExtensions.ToDynamicList(System.Collections.IEnumerable,System.Type)">
            <summary>
            Creates a list of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <param name="type">A <see cref="T:System.Type"/> cast to.</param>
            <returns>A List that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicEnumerableExtensions.ToDynamicList``1(System.Collections.IEnumerable)">
            <summary>
            Creates a list of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">Generic Type</typeparam>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>A List{T} that contains the elements from the input sequence.</returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.DynamicExpressionParser">
            <summary>
            Helper class to convert an expression into an LambdaExpression
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Type,Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda``1(Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda``1(System.Type,Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Type,Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda``1(Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.Linq.Expressions.ParameterExpression[],System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda``1(System.Type,Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.Linq.Expressions.ParameterExpression[],System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Boolean,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda``2(Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="T">The `it`-Type.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda``2(System.Type,Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="T">The `it`-Type.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(Skywalker.Extensions.Linq.ParsingConfig,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Type,Skywalker.Extensions.Linq.ParsingConfig,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(Skywalker.Extensions.Linq.ParsingConfig,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Type,Skywalker.Extensions.Linq.ParsingConfig,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Type,Skywalker.Extensions.Linq.ParsingConfig,System.Boolean,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Type,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(Skywalker.Extensions.Linq.ParsingConfig,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Type,Skywalker.Extensions.Linq.ParsingConfig,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicExpressionParser.ParseLambda(System.Boolean,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.DynamicGetMemberBinder">
            <summary>
            Code is based on SqlLinq by dkackman (https://github.com/dkackman/SqlLinq/blob/210b594e37f14061424397368ed750ce547c21e7/License.md) however it's modified to solve several issues.
            </summary>
            <seealso cref="T:System.Dynamic.GetMemberBinder" />
        </member>
        <member name="T:Skywalker.Extensions.Linq.DynamicProperty">
            <summary>
            DynamicProperty
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Skywalker.Extensions.Linq.DynamicProperty"/> class.
            </summary>
            <param name="name">The name from the property.</param>
            <param name="type">The type from the property.</param>
        </member>
        <member name="P:Skywalker.Extensions.Linq.DynamicProperty.Name">
            <summary>
            Gets the name from the property.
            </summary>
            <value>
            The name from the property.
            </value>
        </member>
        <member name="P:Skywalker.Extensions.Linq.DynamicProperty.Type">
            <summary>
            Gets the type from the property.
            </summary>
            <value>
            The type from the property.
            </value>
        </member>
        <member name="T:Skywalker.Extensions.Linq.Exceptions.ParseException">
            <summary>
            Represents errors that occur while parsing dynamic linq string expressions.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Exceptions.ParseException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skywalker.Extensions.Linq.Exceptions.ParseException"/> class with a specified error message and position.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="position">The location in the parsed string that produced the <see cref="T:Skywalker.Extensions.Linq.Exceptions.ParseException"/></param>
        </member>
        <member name="P:Skywalker.Extensions.Linq.Exceptions.ParseException.Position">
            <summary>
            The location in the parsed string that produced the <see cref="T:Skywalker.Extensions.Linq.Exceptions.ParseException"/>.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Exceptions.ParseException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Exceptions.ParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Skywalker.Extensions.Linq.ExtensibilityPoint">
            <summary>
            Extensibility point: If you want to modify expanded queries before executing them
            set your own functionality to override empty QueryOptimizer
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Linq.ExtensibilityPoint.QueryOptimizer">
            <summary>
            Place to optimize your queries. Example: Add a reference to Nuget package Linq.Expression.Optimizer 
            and in your program initializers set Extensibility.QueryOptimizer = ExpressionOptimizer.visit;
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Linq.GroupResult">
            <summary>
            The result of a call to a <see cref="T:System.Linq.DynamicQueryableExtensions"/>.GroupByMany() overload.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.GroupResult.Key">
            <summary>
            The key value of the group.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.GroupResult.Count">
            <summary>
            The number of resulting elements in the group.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.GroupResult.Items">
            <summary>
            The resulting elements in the group.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.GroupResult.Subgroups">
            <summary>
            The resulting subgroups in the group.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.GroupResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> showing the key of the group and the number of items in the group.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.IAssemblyHelper">
            <summary>
            IAssemblyHelper interface which is used to retrieve assemblies that have been loaded into the execution context of this application domain.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.IAssemblyHelper.GetAssemblies">
            <summary>
            Gets the assemblies that have been loaded into the execution context of this application domain.
            </summary>
            
            <returns>
            An array of assemblies in this application domain.
            </returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.IQueryableAnalyzer">
            <summary>
            Interface for QueryableAnalyzer.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.IQueryableAnalyzer.SupportsLinqToObjects(System.Linq.IQueryable,System.Linq.IQueryProvider)">
            <summary>
            Determines whether the specified query (and provider) supports LinqToObjects.
            </summary>
            <param name="query">The query to check.</param>
            <param name="provider">The provider to check (can be null).</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.ParameterExpressionHelper.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space
            characters.
            
            Recreates the same functionality as System.String.IsNullOrWhiteSpace but included here
            for compatibility with net35.
            </summary>
            <param name="value">
            The string to test.
            </param>
            <returns>
            true if the value parameter is null or System.String.Empty, or if value consists
            exclusively of white-space characters.
            </returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.ParameterExpressionHelper.GenerateRandomWord">
            <summary>
            Generates a random 16 character word derived from a Guid value.
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Linq.Parser.ConstantExpressionWrapper">
            <summary>
            Based on gblog by graeme-hill. https://github.com/graeme-hill/gblog/blob/master/source_content/articles/2014.139_entity-framework-dynamic-queries-and-parameterization.mkd
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Linq.Parser.EnumerationsFromMscorlib.PredefinedEnumerationTypes">
            <summary>
            All Enum types from mscorlib/netstandard.
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Linq.Parser.ExpressionParser">
            <summary>
            ExpressionParser
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.Parser.ExpressionParser.ItName">
            <summary>
            Gets name for the `it` field. By default this is set to the KeyWord value "it".
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.Parser.ExpressionParser.LastLambdaItName">
            <summary>
            There was a problem when an expression contained multiple lambdas where
            the ItName was not cleared and freed for the next lambda. This variable
            stores the ItName of the last parsed lambda.
            Not used internally by ExpressionParser, but used to preserve compatiblity of parsingConfig.RenameParameterExpression
            which was designed to only work with mono-lambda expressions.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Parser.ExpressionParser.#ctor(System.Linq.Expressions.ParameterExpression[],System.String,System.Object[],Skywalker.Extensions.Linq.ParsingConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Skywalker.Extensions.Linq.Parser.ExpressionParser"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
            <param name="parsingConfig">The parsing configuration.</param>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Parser.ExpressionParser.Parse(System.Type,System.Boolean)">
            <summary>
            Uses the TextParser to parse the string into the specified result type.
            </summary>
            <param name="resultType">Type of the result.</param>
            <param name="createParameterCtor">if set to <c>true</c> [create parameter ctor].</param>
            <returns>Expression</returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.Parser.ExpressionPromoter">
            <summary>
            ExpressionPromoter
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Parser.ExpressionPromoter.#ctor(Skywalker.Extensions.Linq.ParsingConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Skywalker.Extensions.Linq.Parser.ExpressionPromoter"/> class.
            </summary>
            <param name="config">The ParsingConfig.</param>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Parser.ExpressionPromoter.Promote(System.Linq.Expressions.Expression,System.Type,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:Skywalker.Extensions.Linq.Parser.IExpressionPromoter.Promote(System.Linq.Expressions.Expression,System.Type,System.Boolean,System.Boolean)"/>
        </member>
        <member name="T:Skywalker.Extensions.Linq.Parser.IExpressionPromoter">
            <summary>
            Expression promoter is used to promote object or value types
            to their destination type when an automatic promotion is available
            such as: int to int?
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Parser.IExpressionPromoter.Promote(System.Linq.Expressions.Expression,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Promote an expression
            </summary>
            <param name="expr">Source expression</param>
            <param name="type">Destionation data type to promote</param>
            <param name="exact">If the match must be exact</param>
            <param name="convertExpr">Convert expression</param>
            <returns>The promoted <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="T:Skywalker.Extensions.Linq.Parser.NumberParser">
            <summary>
            NumberParser
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Parser.NumberParser.#ctor(Skywalker.Extensions.Linq.ParsingConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Skywalker.Extensions.Linq.Parser.NumberParser"/> class.
            </summary>
            <param name="config">The ParsingConfig.</param>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Parser.NumberParser.ParseNumber(System.String,System.Type)">
            <summary>
            Parses the number (text) into the specified type.
            </summary>
            <param name="text">The text.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:Skywalker.Extensions.Linq.Parser.StringParser">
            <summary>
            Parse a Double and Single Quoted string.
            Some parts of the code is based on https://github.com/zzzprojects/Eval-Expression.NET
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Parser.SupportedMethods.MethodFinder.#ctor(Skywalker.Extensions.Linq.ParsingConfig)">
            <summary>
            Get an instance
            </summary>
            <param name="parsingConfig"></param>
        </member>
        <member name="T:Skywalker.Extensions.Linq.ParsingConfig">
            <summary>
            Configuration class for Skywalker.Extensions.Linq.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.Default">
            <summary>
            Default ParsingConfig
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.DefaultEFCore21">
            <summary>
            Default ParsingConfig for EntityFramework Core 2.1 and higher
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.IsCaseSensitive">
            <summary>Gets or sets if parameter, method, and properties resolution should be case sensitive or not (false by default).</summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.DefaultCosmosDb">
            <summary>
            Default ParsingConfig for CosmosDb
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.CustomTypeProvider">
            <summary>
            Gets or sets the <see cref="T:Skywalker.Extensions.Linq.CustomTypeProviders.IDynamicLinkCustomTypeProvider"/>.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.ExpressionPromoter">
            <summary>
            Gets or sets the <see cref="T:Skywalker.Extensions.Linq.Parser.IExpressionPromoter"/>.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.QueryableAnalyzer">
            <summary>
            Gets or sets the <see cref="T:Skywalker.Extensions.Linq.IQueryableAnalyzer"/>.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.AreContextKeywordsEnabled">
            <summary>
            Determines if the context keywords (it, parent, and root) are valid and usable inside a Dynamic Linq string expression.  
            Does not affect the usability of the equivalent context symbols ($, ^ and ~).
            
            Default value is true.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.EvaluateGroupByAtDatabase">
             <summary>
             Gets or sets a value indicating whether the EntityFramework version supports evaluating GroupBy at database level.
             See https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-2.1#linq-groupby-translation
             
             Remark: when this setting is set to 'true', make sure to supply this ParsingConfig as first parameter on the extension methods.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.UseParameterizedNamesInDynamicQuery">
             <summary>
             Use Parameterized Names in generated dynamic SQL query.
             See https://github.com/graeme-hill/gblog/blob/master/source_content/articles/2014.139_entity-framework-dynamic-queries-and-parameterization.mkd
            
             Default value is false.
             </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.AllowNewToEvaluateAnyType">
             <summary>
             Allows the New() keyword to evaluate any available Type.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.RenameParameterExpression">
             <summary>
             Renames the (Typed)ParameterExpression empty Name to a the correct supplied name from `it`.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.RenameEmptyParameterExpressionNames">
            <summary>
            Prevents any System.Linq.Expressions.ParameterExpression.Name value from being empty by substituting a random 16 character word.
            
            Default value is false.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.DisableMemberAccessToIndexAccessorFallback">
             <summary>
             By default when a member is not found in a type and the type has a string based index accessor it will be parsed as an index accessor. Use
             this flag to disable this behaviour and have parsing fail when parsing an expression
             where a member access on a non existing member happens.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.ResolveTypesBySimpleName">
            <summary>
            By default finding types by a simple name is not supported.
            Use this flag to use the CustomTypeProvider to resolve types by a simple name like "Employee" instead of "MyDatabase.Entities.Employee".
            Note that a first matching type is returned and this functionality needs to scan all types from all assemblies, so use with caution.
            
            Default value is false.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.SupportEnumerationsFromSystemNamespace">
            <summary>
            Support enumeration-types from the System namespace in mscorlib. An example could be "StringComparison".
            
            Default value is true.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.DateTimeIsParsedAsUTC">
             <summary>
             By default DateTime (like 'Fri, 10 May 2019 11:03:17 GMT') is parsed as local time.
             Use this flag to parse all DateTime strings as UTC.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.NumberParseCulture">
             <summary>
             The number parsing culture.
            
             Default value is CultureInfo.InvariantCulture
             </summary>
        </member>
        <member name="P:Skywalker.Extensions.Linq.ParsingConfig.TypeConverters">
            <summary>
            Additional TypeConverters
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Linq.TypeConverters.CustomDateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a <see cref="T:System.DateTime"></see>.
            </summary>
            <param name="context">The date format context.</param>
            <param name="culture">The date culture.</param>
            <param name="value">The object to be converted.</param>
            <returns>A <see cref="T:System.Nullable`1"></see> that represents the specified object.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Skywalker.Extensions.Linq.TypeConverters.ITypeConverterFactory.GetConverter(System.Type)">
            <summary>
            Returns a type converter for the specified type.
            </summary>
            <param name="type">The System.Type of the target component.</param>
            <returns>A System.ComponentModel.TypeConverter for the specified type.</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.TypeConverters.TypeConverterFactory.GetConverter(System.Type)">
            <see cref="M:Skywalker.Extensions.Linq.TypeConverters.ITypeConverterFactory.GetConverter(System.Type)"/>
        </member>
        <member name="T:Skywalker.Extensions.Linq.Util.ParameterExpressionRenamer">
            <summary>
            Renames a single (Typed)ParameterExpression in an Expression.
            </summary>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="M:Skywalker.Extensions.Linq.Util.ParameterExpressionRenamer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Skywalker.Extensions.Linq.Util.ParameterExpressionRenamer"/> class.
            </summary>
            <param name="newName">The new name (the oldName is assumed to be "").</param>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Util.ParameterExpressionRenamer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Skywalker.Extensions.Linq.Util.ParameterExpressionRenamer"/> class.
            </summary>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Util.ParameterExpressionRenamer.Rename(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            Renames a single (Typed)ParameterExpression from specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="parameterExpression">The new generated (Typed)ParameterExpression.</param>
            <returns>Renamed Expression</returns>
        </member>
        <member name="M:Skywalker.Extensions.Linq.Util.ParameterExpressionRenamer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc cref="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)"/>
        </member>
        <member name="T:Skywalker.Extensions.Text.FormattedStringValueExtracter">
            <summary>
            This class is used to extract dynamic values from a formatted string.
            It works as reverse of <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <example>
            Say that str is "My name is Neo." and format is "My name is {name}.".
            Then Extract method gets "Neo" as "name".  
            </example>
        </member>
        <member name="M:Skywalker.Extensions.Text.FormattedStringValueExtracter.Extract(System.String,System.String,System.Boolean,System.Nullable{System.Char})">
            <summary>
            Extracts dynamic values from a formatted string.
            </summary>
            <param name="str">String including dynamic values</param>
            <param name="format">Format of the string</param>
            <param name="ignoreCase">True, to search case-insensitive.</param>
            <param name="splitformatCharacter">format is splitted using this character when provided.</param>
        </member>
        <member name="M:Skywalker.Extensions.Text.FormattedStringValueExtracter.IsMatch(System.String,System.String,System.String[]@,System.Boolean)">
            <summary>
            Checks if given <see cref="!:str"/> fits to given <see cref="!:format"/>.
            Also gets extracted values.
            </summary>
            <param name="str">String including dynamic values</param>
            <param name="format">Format of the string</param>
            <param name="values">Array of extracted values if matched</param>
            <param name="ignoreCase">True, to search case-insensitive</param>
            <returns>True, if matched.</returns>
        </member>
        <member name="T:Skywalker.Extensions.Text.FormattedStringValueExtracter.ExtractionResult">
            <summary>
            Used as return value of <see cref="M:Skywalker.Extensions.Text.FormattedStringValueExtracter.Extract(System.String,System.String,System.Boolean,System.Nullable{System.Char})"/> method.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Text.FormattedStringValueExtracter.ExtractionResult.IsMatch">
            <summary>
            Is fully matched.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Text.FormattedStringValueExtracter.ExtractionResult.Matches">
            <summary>
            List of matched dynamic values.
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Threading.AsyncHelper">
            <summary>
            Provides some helper methods to work with async methods.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Threading.AsyncHelper.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            Checks if given method is an async method.
            </summary>
            <param name="method">A method to check</param>
        </member>
        <member name="M:Skywalker.Extensions.Threading.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs a async method synchronously.
            </summary>
            <param name="func">A function that returns a result</param>
            <typeparam name="TResult">Result type</typeparam>
            <returns>Result of the async operation</returns>
        </member>
        <member name="M:Skywalker.Extensions.Threading.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a async method synchronously.
            </summary>
            <param name="action">An async action</param>
        </member>
        <member name="M:Skywalker.Extensions.Threading.Locking.Lock.Create">
            <summary>
            Creates a new lock.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Skywalker.Extensions.Threading.OneTimeRunner">
            <summary>
            This class is used to ensure running of a code block only once.
            It can be instantiated as a static object to ensure that the code block runs only once in the application lifetime.
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Threading.TaskHelper">
            <summary>
            Provides some helper methods to work with async methods.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Threading.TaskHelper.IsAsyncMethod(System.Reflection.MethodInfo)">
            <summary>
            Checks if given method is an async method.
            </summary>
            <param name="method">A method to check</param>
        </member>
        <member name="M:Skywalker.Extensions.Threading.TaskHelper.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs a async method synchronously.
            </summary>
            <param name="func">A function that returns a result</param>
            <typeparam name="TResult">Result type</typeparam>
            <returns>Result of the async operation</returns>
        </member>
        <member name="M:Skywalker.Extensions.Threading.TaskHelper.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a async method synchronously.
            </summary>
            <param name="action">An async action</param>
        </member>
        <member name="T:Skywalker.Extensions.Tokenizer.Token">
            <summary>
            Represent a token and optionally any text associated with it.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Tokenizer.Token.Kind">
            <summary>
            Gets the kind/type/class of the token.
            </summary>
        </member>
        <member name="P:Skywalker.Extensions.Tokenizer.Token.Text">
            <summary>
            Gets text, if any, associated with the token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Eoi">
            <summary>
            Creates an end-of-input token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Star">
            <summary>
            Creates a star token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Dot">
            <summary>
            Creates a dot token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Colon">
            <summary>
            Creates a colon token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Comma">
            <summary>
            Creates a comma token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Semicolon">
            <summary>
            Creates a comma token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.RightParenthesis">
            <summary>
            Creates a right parenthesis token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Equals">
            <summary>
            Creates an equals token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.NotEqual">
            <summary>
            Creates a not-equals token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.LeftBracket">
            <summary>
            Creates a left bracket token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.RightBracket">
            <summary>
            Creates a right bracket token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Pipe">
            <summary>
            Creates a pipe (vertical line) token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Plus">
            <summary>
            Creates a plus token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Greater">
            <summary>
            Creates a greater token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Includes">
            <summary>
            Creates an includes token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.RegexMatch">
            <summary>
            Creates a regex match token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.DashMatch">
            <summary>
            Creates a dash-match token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.PrefixMatch">
            <summary>
            Creates a prefix-match token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.SuffixMatch">
            <summary>
            Creates a suffix-match token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.SubstringMatch">
            <summary>
            Creates a substring-match token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Tilde">
            <summary>
            Creates a general sibling token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Slash">
            <summary>
            Creates a general slash token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Ident(System.String)">
            <summary>
            Creates an identifier token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Integer(System.String)">
            <summary>
            Creates an integer token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Hash(System.String)">
            <summary>
            Creates a hash-name token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.WhiteSpace(System.String)">
            <summary>
            Creates a white-space token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.String(System.String)">
            <summary>
            Creates a string token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Function(System.String)">
            <summary>
            Creates a function token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Char(System.Char)">
            <summary>
            Creates an arbitrary character token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.Equals(Skywalker.Extensions.Tokenizer.Token)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.ToString">
            <summary>
            Gets a string representation of the token.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.op_Equality(Skywalker.Extensions.Tokenizer.Token,Skywalker.Extensions.Tokenizer.Token)">
            <summary>
            Performs a logical comparison of the two tokens to determine 
            whether they are equal. 
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Token.op_Inequality(Skywalker.Extensions.Tokenizer.Token,Skywalker.Extensions.Tokenizer.Token)">
            <summary>
            Performs a logical comparison of the two tokens to determine 
            whether they are inequal. 
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Tokenizer.Tokener">
            <summary>
            Lexer for tokens in CSS selector grammar.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Tokener.Tokenize(System.IO.TextReader)">
            <summary>
            Parses tokens from a given text source.
            </summary>
        </member>
        <member name="M:Skywalker.Extensions.Tokenizer.Tokener.Tokenize(System.String)">
            <summary>
            Parses tokens from a given string.
            </summary>
        </member>
        <member name="T:Skywalker.Extensions.Tokenizer.TokenKind">
            <summary>
            Represents the classification of a token.
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Eoi">
            <summary>
            Represents end of input/file/stream
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Ident">
            <summary>
            Represents {ident}
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Hash">
            <summary>
            Represents "#" {name}
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Includes">
            <summary>
            Represents "~="
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.DashMatch">
            <summary>
            Represents "|="
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.NotEqual">
            <summary>
            Represents "!="
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.PrefixMatch">
            <summary>
            Represents "^="
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.SuffixMatch">
            <summary>
            Represents "$="
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.SubstringMatch">
            <summary>
            Represents "*="
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.RegexMatch">
            <summary>
            Represents "%"
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.String">
            <summary>
            Represents {string}
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Plus">
            <summary>
            Represents S* "+"
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Greater">
            <summary>
            Represents S* ">"
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.WhiteSpace">
            <summary>
            Represents [ \t\r\n\f]+
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Function">
            <summary>
            Represents {ident} ")"
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Integer">
            <summary>
            Represents [0-9]+
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Tilde">
            <summary>
            Represents S* "~"
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Slash">
            <summary>
            Represents "/"
            </summary>
        </member>
        <member name="F:Skywalker.Extensions.Tokenizer.TokenKind.Char">
            <summary>
            Represents an arbitrary character
            </summary>
        </member>
        <member name="T:Skywalker.Logging.IHasLogLevel">
            <summary>
            Interface to define a <see cref="P:Skywalker.Logging.IHasLogLevel.LogLevel"/> property (see <see cref="P:Skywalker.Logging.IHasLogLevel.LogLevel"/>).
            </summary>
        </member>
        <member name="P:Skywalker.Logging.IHasLogLevel.LogLevel">
            <summary>
            Log severity.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ICollectionExtensions">
            <summary>
            Extension methods for Collections.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ICollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Checks whatever given collection object is null or has no item.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ICollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to the collection if it's not already in the collection.
            </summary>
            <param name="source">Collection</param>
            <param name="item">Item to check and add</param>
            <typeparam name="T">Type of the items in the collection</typeparam>
            <returns>Returns True if added, returns False if not.</returns>
        </member>
        <member name="M:System.Collections.Generic.ICollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items to the collection which are not already in the collection.
            </summary>
            <param name="source">The collection</param>
            <param name="items">Item to check and add</param>
            <typeparam name="T">Type of the items in the collection</typeparam>
            <returns>Returns the added items.</returns>
        </member>
        <member name="M:System.Collections.Generic.ICollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            Adds an item to the collection if it's not already in the collection based on the given <paramref name="predicate"/>.
            </summary>
            <param name="source">The collection</param>
            <param name="predicate">The condition to decide if the item is already in the collection</param>
            <param name="itemFactory">A factory that returns the item</param>
            <typeparam name="T">Type of the items in the collection</typeparam>
            <returns>Returns True if added, returns False if not.</returns>
        </member>
        <member name="M:System.Collections.Generic.ICollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all items from the collection those satisfy the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">Type of the items in the collection</typeparam>
            <param name="source">The collection</param>
            <param name="predicate">The condition to remove the items</param>
            <returns>List of removed items</returns>
        </member>
        <member name="M:System.Collections.Generic.ICollectionExtensions.GetContentsHashCode``1(System.Collections.Generic.IList{``0})">
            <summary>
              Generates a HashCode for the contents for the list. Order of items does not matter.
            </summary>
            <typeparam name="T">The type of object contained within the list.</typeparam>
            <param name="list">The list.</param>
            <returns>The generated HashCode.</returns>
        </member>
        <member name="M:System.Collections.Generic.ICollectionExtensions.AreEquivalent``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
              Determines if two lists are equivalent. Equivalent lists have the same number of items and each item is found within the other regardless of respective position within each.
            </summary>
            <typeparam name="T">The type of object contained within the list.</typeparam>
            <param name="listA">The first list.</param>
            <param name="listB">The second list.</param>
            <returns><c>True</c> if the two lists are equivalent.</returns>
        </member>
        <member name="T:System.Collections.Generic.IDictionaryExtensions">
            <summary>
            Extension methods for Dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            This method is used to try to get a value in a dictionary if it does exists.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="dictionary">The collection object</param>
            <param name="key">Key</param>
            <param name="value">Value of the key (or default value if key not exists)</param>
            <returns>True if key does exists in the dictionary</returns>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.GetOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.GetOrDefault``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <param name="factory">A factory method used to create the value if not found in the dictionary</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <param name="factory">A factory method used to create the value if not found in the dictionary</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="T:System.Collections.Generic.IEnumerableExtensions">
            <summary> 
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.JoinAsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type System.String, using the specified separator between each member.
            This is a shortcut for string.Join(...)
            </summary>
            <param name="source">A collection that contains the strings to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty.</returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            This is a shortcut for string.Join(...)
            </summary>
            <param name="source">A collection that contains the objects to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <typeparam name="T">The type of the members of values.</typeparam>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty.</returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
              Checks whether or not collection is null or empty. Assumes colleciton can be safely enumerated multiple times.
            </summary>
            <param name = "this"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.SortByDependencies``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Sort a list by a topological sorting, which consider their dependencies.
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="source">A list of objects to sort</param>
            <param name="getDependencies">Function to resolve the dependencies</param>
            <returns>
            Returns a new list ordered by dependencies.
            If A depends on B, then B will come before than A in the resulting list. 
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.SortByDependenciesVisit``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="item">Item to resolve</param>
            <param name="getDependencies">Function to resolve the dependencies</param>
            <param name="sorted">List with the sortet items</param>
            <param name="visited">Dictionary with the visited items</param>
        </member>
        <member name="T:System.Collections.Generic.IListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.NamedTypeSelectorListExtensions.Add(System.Collections.Generic.IList{Skywalker.Extensions.Collections.NamedTypeSelector},System.String,System.Type[])">
            <summary>
            Add list of types to the list.
            </summary>
            <param name="list">List of NamedTypeSelector items</param>
            <param name="name">An arbitrary but unique name (can be later used to remove types from the list)</param>
            <param name="types"></param>
        </member>
        <member name="T:System.Collections.Generic.Reader`1">
            <summary>
            Adds reading semantics to a base <see cref="T:System.Collections.Generic.IEnumerator`1"/> with the 
            option to un-read and insert new elements while consuming the source.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Reader`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialize a new <see cref="T:System.Collections.Generic.Reader`1"/> with a base
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> object.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Reader`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initialize a new <see cref="T:System.Collections.Generic.Reader`1"/> with a base
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> object.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Reader`1.HasMore">
            <summary>
            Indicates whether there is, at least, one value waiting to be read or not.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Reader`1.Unread(`0)">
            <summary>
            Pushes back a new value that will be returned on the next read.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Reader`1.Read">
            <summary>
            Reads and returns the next value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Reader`1.Peek">
            <summary>
            Peeks the next value waiting to be read.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there is no value waiting to be read.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.Reader`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the remaining
            values to be read.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Reader`1.Close">
            <summary>
            Disposes the enumerator used to initialize this object
            if that enumerator supports <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:System.ComparableExtensions">
            <summary>
            Extension methods for <see cref="T:System.IComparable`1"/>.
            </summary>
        </member>
        <member name="M:System.ComparableExtensions.IsBetween``1(``0,``0,``0)">
            <summary>
            Checks a value is between a minimum and maximum value.
            </summary>
            <param name="value">The value to be checked</param>
            <param name="minInclusiveValue">Minimum (inclusive) value</param>
            <param name="maxInclusiveValue">Maximum (inclusive) value</param>
        </member>
        <member name="M:System.Converters.ToDictionary(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Converts an object to a dictionary object without the properties which have a null value or a [DataMember( EmitDefaultValue = false )] applied.
            This can be used as a workaround for System.Text.Json which will always serialize null values which breaks ChartJS functionality.
            </summary>
            <param name="source">The source object, can be null.</param>
            <param name="addEmptyObjects">Objects which do not have any properties are also added to the dictionary. Default value is true.</param>
            <param name="forceCamelCase">Force to use CamelCase, even if a DataMember has another casing defined. Default value is true.</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:System.Converters.GetMinMaxValueOfType``1">
            <summary>
            Gets the min and max possible value based on the supplied value type
            </summary>
            <typeparam name="TValue">Value data type.</typeparam>
            <returns>Returns the min and max value of supplied value type.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when value type is unknown.</exception>
        </member>
        <member name="T:System.DisposeAction">
            <summary>
            This class can be used to provide an action when
            Dipose method is called.
            </summary>
        </member>
        <member name="M:System.DisposeAction.#ctor(System.Action)">
            <summary>
            Creates a new <see cref="T:System.DisposeAction"/> object.
            </summary>
            <param name="action">Action to be executed when this object is disposed.</param>
        </member>
        <member name="M:System.DisposeAction.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:System.EnumExtensions.GetEnumDescription``1(``0)">
            <summary>
            获取枚举的描述信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enum"></param>
            <returns></returns>
        </member>
        <member name="M:System.EnumExtensions.GetEnumName``1(``0)">
            <summary>
            获取枚举的名字
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enum"></param>
            <returns></returns>
        </member>
        <member name="T:System.EventHandlerExtensions">
            <summary>
            EventHandler的扩展方法 <see cref="T:System.EventHandler"/>.
            </summary>
        </member>
        <member name="M:System.EventHandlerExtensions.InvokeSafely(System.EventHandler,System.Object)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
        </member>
        <member name="M:System.EventHandlerExtensions.InvokeSafely(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:System.EventHandlerExtensions.InvokeSafely``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <typeparam name="TEventArgs">Type of the <see cref="T:System.EventArgs"/></typeparam>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.ReThrow(System.Exception)">
            <summary>
            Uses <see cref="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)"/> method to re-throws exception
            while preserving stack trace.
            </summary>
            <param name="exception">Exception to be re-thrown</param>
        </member>
        <member name="T:System.Linq.DynamicQueryableExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement <see cref="T:System.Linq.IQueryable"/>.
            It allows dynamic string based querying. Very handy when, at compile time, you don't know the type of queries that will be generated,
            or when downstream components only return column names to sort and filter by.
            </summary>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Aggregate(System.Linq.IQueryable,System.String,System.String)">
            <summary>
            Dynamically runs an aggregate function on the IQueryable.
            </summary>
            <param name="source">The IQueryable data source.</param>
            <param name="function">The name of the function to run. Can be Sum, Average, Min or Max.</param>
            <param name="member">The name of the property to aggregate over.</param>
            <returns>The value of the aggregate function run over the specified property.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.All(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that All asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to calculate the All of.
            </param>
            <param name="predicate">A projection function to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.All(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
                Determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that All asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to calculate the All of.
            </param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A projection function to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Any(System.Linq.IQueryable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">A sequence to check for being empty.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Any();
            </code>
            </example>
            <returns>true if the source sequence contains any elements; otherwise, false.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Any(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">A sequence to check for being empty.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Any("Income > 50");
            var result2 = queryable.Any("Income > @0", 50);
            var result3 = queryable.Select("Roles.Any()");
            </code>
            </example>
            <returns>true if the source sequence contains any elements; otherwise, false.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Any(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Any(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Any(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">A sequence to check for being empty.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>true if the source sequence contains any elements; otherwise, false.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Average(System.Linq.IQueryable)">
            <summary>
            Computes the average of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the average of.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Average();
            var result2 = queryable.Select("Roles.Average()");
            </code>
            </example>
            <returns>The average of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Average(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Computes the average of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the average of.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Average("Income");
            </code>
            </example>
            <returns>The average of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Average(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Average(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Average(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Computes the average of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the average of.</param>
            <param name="lambda">A Lambda Expression.</param>
            <returns>The average of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.AsEnumerable(System.Linq.IQueryable)">
            <summary>
            Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/> of dynamic.
            </summary>
            <param name="source">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1"/> of dynamic.</param>
            <returns>The input typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/> of dynamic.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Cast(System.Linq.IQueryable,System.Type)">
            <summary>
            Converts the elements of an <see cref="T:System.Linq.IQueryable"/> to the specified type.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be converted.</param>
            <param name="type">The type to convert the elements of source to.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Cast(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String)">
            <summary>
            Converts the elements of an <see cref="T:System.Linq.IQueryable"/> to the specified type.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be converted.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="typeName">The type to convert the elements of source to.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Cast(System.Linq.IQueryable,System.String)">
            <summary>
            Converts the elements of an <see cref="T:System.Linq.IQueryable"/> to the specified type.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be converted.</param>
            <param name="typeName">The type to convert the elements of source to.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Count(System.Linq.IQueryable)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Count();
            </code>
            </example>
            <returns>The number of elements in the input sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Count(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Count("Income > 50");
            var result2 = queryable.Count("Income > @0", 50);
            var result3 = queryable.Select("Roles.Count()");
            </code>
            </example>
            <returns>The number of elements in the specified sequence that satisfies a condition.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Count(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Count(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Count(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The number of elements in the specified sequence that satisfies a condition.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.DefaultIfEmpty(System.Linq.IQueryable)">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return a default value for if empty.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.DefaultIfEmpty();
            </code>
            </example>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains default if source is empty; otherwise, source.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.DefaultIfEmpty(System.Linq.IQueryable,System.Object)">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return a default value for if empty.</param>
            <param name="defaultValue">The value to return if the sequence is empty.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.DefaultIfEmpty(new Employee());
            </code>
            </example>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains defaultValue if source is empty; otherwise, source.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Distinct(System.Linq.IQueryable)">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Distinct();
            var result2 = queryable.Select("Roles.Distinct()");
            </code>
            </example>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains distinct elements from the source sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.First(System.Linq.IQueryable)">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <returns>The first element in source.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.First(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.First(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.First(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.First(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.FirstOrDefault(System.Linq.IQueryable)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <returns>default if source is empty; otherwise, the first element in source.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.FirstOrDefault(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>default if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.FirstOrDefault(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.FirstOrDefault(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.FirstOrDefault(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>default if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String,System.Object[])">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="resultSelector">A string expression to specify a result value from each group.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
            <example>
            <code>
            var groupResult1 = queryable.GroupBy("NumberPropertyAsKey", "StringProperty");
            var groupResult2 = queryable.GroupBy("new (NumberPropertyAsKey, StringPropertyAsKey)", "new (StringProperty1, StringProperty2)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String,System.Collections.IEqualityComparer,System.Object[])">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="resultSelector">A string expression to specify a result value from each group.</param>
            <param name="equalityComparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Collections.IEqualityComparer,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String,System.Collections.IEqualityComparer,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String)">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="resultSelector">A string expression to specify a result value from each group.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
            <example>
            <code>
            var groupResult1 = queryable.GroupBy("NumberPropertyAsKey", "StringProperty");
            var groupResult2 = queryable.GroupBy("new (NumberPropertyAsKey, StringPropertyAsKey)", "new (StringProperty1, StringProperty2)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String)">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String)"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String,System.Collections.IEqualityComparer)">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="resultSelector">A string expression to specify a result value from each group.</param>
            <param name="equalityComparer">The comparer to use.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Collections.IEqualityComparer)">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String,System.Collections.IEqualityComparer)"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
            <example>
            <code>
            var groupResult1 = queryable.GroupBy("NumberPropertyAsKey");
            var groupResult2 = queryable.GroupBy("new (NumberPropertyAsKey, StringPropertyAsKey)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Collections.IEqualityComparer,System.Object[])">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="equalityComparer">The comparer to use.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.Collections.IEqualityComparer,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Collections.IEqualityComparer,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.String[])">
            <summary>
            Groups the elements of a sequence according to multiple specified key string functions 
            and creates a result value from each group (and subgroups) and its key.
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="source">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="keySelectors"><see cref="T:System.String"/> expressions to specify the keys for each element.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:Skywalker.Extensions.Linq.GroupResult"/> where each element represents a projection over a group, its key, and its subgroups.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.String[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            Groups the elements of a sequence according to multiple specified key functions 
            and creates a result value from each group (and subgroups) and its key.
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="source">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param>
            <param name="keySelectors">Lambda expressions to specify the keys for each element.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:Skywalker.Extensions.Linq.GroupResult"/> where each element represents a projection over a group, its key, and its subgroups.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupJoin(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])">
            <summary>
            Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.
            </summary>
            <param name="outer">The first sequence to join.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A dynamic function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A dynamic function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A dynamic function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicates as parameters. Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> obtained by performing a grouped join on two sequences.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.GroupJoin(System.Linq.IQueryable,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.GroupJoin(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Join(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
            </summary>
            <param name="outer">The first sequence to join.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A dynamic function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A dynamic function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A dynamic function to create a result element from two matching elements.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicates as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> obtained by performing an inner join on two sequences.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Join(System.Linq.IQueryable,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Join(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Join``1(System.Linq.IQueryable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Object[])">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
            </summary>
            <typeparam name="TElement">The type of the elements of both sequences, and the result.</typeparam>
            <param name="outer">The first sequence to join.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A dynamic function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A dynamic function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A dynamic function to create a result element from two matching elements.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicates as parameters.  Similar to the way String.Format formats strings.</param>
            <remarks>This overload only works on elements where both sequences and the resulting element match.</remarks>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> that has elements of type TResult obtained by performing an inner join on two sequences.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Join``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Join``1(System.Linq.IQueryable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Last(System.Linq.IQueryable)">
            <summary>
            Returns the last element of a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <returns>The last element in source.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Last(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Last(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Last(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Last(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.LastOrDefault(System.Linq.IQueryable)">
            <summary>
            Returns the last element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <returns>default if source is empty; otherwise, the last element in source.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.LastOrDefault(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.LastOrDefault(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.LastOrDefault(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.LastOrDefault(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.LongCount(System.Linq.IQueryable)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.LongCount();
            </code>
            </example>
            <returns>The number of elements in the input sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.LongCount(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.LongCount("Income > 50");
            var result2 = queryable.LongCount("Income > @0", 50);
            var result3 = queryable.Select("Roles.LongCount()");
            </code>
            </example>
            <returns>The number of elements in the specified sequence that satisfies a condition.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.LongCount(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.LongCount(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.LongCount(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The number of elements in the specified sequence that satisfies a condition.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Max(System.Linq.IQueryable)">
            <summary>
            Computes the max element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the max for.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Max();
            var result2 = queryable.Select("Roles.Max()");
            </code>
            </example>
            <returns>The max element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Max(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Computes the max element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the max for.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Max("Income");
            </code>
            </example>
            <returns>The max element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Max(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Max(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Max(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Computes the max element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the max for.</param>
            <param name="lambda">A Lambda Expression.</param>
            <returns>The max element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Min(System.Linq.IQueryable)">
            <summary>
            Computes the min element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the min for.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Min();
            var result2 = queryable.Select("Roles.Min()");
            </code>
            </example>
            <returns>The min element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Min(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Computes the min element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the min for.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Min("Income");
            </code>
            </example>
            <returns>The min element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Min(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Min(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Min(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Computes the min element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the min for.</param>
            <param name="lambda">A Lambda Expression.</param>
            <returns>The min element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OfType(System.Linq.IQueryable,System.Type)">
            <summary>
            Filters the elements of an <see cref="T:System.Linq.IQueryable"/> based on a specified type.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IQueryable"/> whose elements to filter.</param>
            <param name="type">The type to filter the elements of the sequence on.</param>
            <returns>A collection that contains the elements from source that have the type.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OfType(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String)">
            <summary>
            Filters the elements of an <see cref="T:System.Linq.IQueryable"/> based on a specified type.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IQueryable"/> whose elements to filter.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="typeName">The type to filter the elements of the sequence on.</param>
            <returns>A collection that contains the elements from source that have the type.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OfType(System.Linq.IQueryable,System.String)">
            <summary>
            Filters the elements of an <see cref="T:System.Linq.IQueryable"/> based on a specified type.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IQueryable"/> whose elements to filter.</param>
            <param name="typeName">The type to filter the elements of the sequence on.</param>
            <returns>A collection that contains the elements from source that have the type.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
            <example>
            <code>
            <![CDATA[
            var resultSingle = queryable.OrderBy<User>("NumberProperty");
            var resultSingleDescending = queryable.OrderBy<User>("NumberProperty DESC");
            var resultMultiple = queryable.OrderBy<User>("NumberProperty, StringProperty");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
            <example>
            <code>
            var resultSingle = queryable.OrderBy("NumberProperty");
            var resultSingleDescending = queryable.OrderBy("NumberProperty DESC");
            var resultMultiple = queryable.OrderBy("NumberProperty, StringProperty DESC");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Collections.IComparer,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Page(System.Linq.IQueryable,System.Int32,System.Int32)">
            <summary>
            Returns the elements as paged.
            </summary>
            <param name="source">The IQueryable to return elements from.</param>
            <param name="skip">The page to return.</param>
            <param name="limit">The number of elements per page.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> that contains the paged elements.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Returns the elements as paged.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The IQueryable to return elements from.</param>
            <param name="skip">The page to return.</param>
            <param name="limit">The number of elements per page.</param>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> that contains the paged elements.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Reverse(System.Linq.IQueryable)">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <param name="source">A sequence of values to reverse.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements correspond to those of the input sequence in reverse order.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Select(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking a projection string on each element of source.</returns>
            <example>
            <code>
            var singleField = queryable.Select("StringProperty");
            var dynamicObject = queryable.Select("new (StringProperty1, StringProperty2 as OtherStringPropertyName)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Select(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Select``1(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence into a new class of type TResult.
            Details see <see href="http://solutionizing.net/category/linq/"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> whose elements are the result of invoking a projection string on each element of source.</returns>
            <example>
            <code language="cs">
            <![CDATA[
            var users = queryable.Select<User>("new (Username, Pwd as Password)");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Select``1(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Select``1(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Select(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.Type,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence into a new class of type TResult.
            Details see http://solutionizing.net/category/linq/ 
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="resultType">The result type.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking a projection string on each element of source.</returns>
            <example>
            <code>
            var users = queryable.Select(typeof(User), "new (Username, Pwd as Password)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Select(System.Linq.IQueryable,System.Type,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Select(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.Type,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Linq.IQueryable"/> and combines the resulting sequences into one sequence.
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
            <example>
            <code>
            var roles = users.SelectMany("Roles");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.Type,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Linq.IQueryable"/> and combines the resulting sequences into one sequence.
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="resultType">The result type.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
            <example>
            <code>
            var permissions = users.SelectMany(typeof(Permission), "Roles.SelectMany(Permissions)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.Type,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.Type,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SelectMany``1(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Linq.IQueryable`1"/> and combines the resulting sequences into one sequence.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
            <example>
            <code>
            <![CDATA[
            var permissions = users.SelectMany<Permission>("Roles.SelectMany(Permissions)");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SelectMany``1(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.SelectMany``1(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String,System.Object[],System.Object[])">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Linq.IQueryable"/>
            and invokes a result selector function on each element therein. The resulting
            values from each intermediate sequence are combined into a single, one-dimensional
            sequence and returned.
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="collectionSelector">A projection function to apply to each element of the input sequence.</param>
            <param name="resultSelector">A projection function to apply to each element of each intermediate sequence. Should only use x and y as parameter names.</param>
            <param name="collectionSelectorArgs">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="resultSelectorArgs">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking the one-to-many 
            projection function <paramref name="collectionSelector"/> on each element of source and then mapping
            each of those sequence elements and their corresponding source element to a result element.
            </returns>
            <example>
            <code>
            <![CDATA[
            // TODO
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.String,System.String,System.Object[],System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String,System.String,System.String,System.Object[],System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String,System.String,System.String,System.Object[],System.Object[])">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Linq.IQueryable"/>
            and invokes a result selector function on each element therein. The resulting
            values from each intermediate sequence are combined into a single, one-dimensional
            sequence and returned.
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="collectionSelector">A projection function to apply to each element of the input sequence.</param>
            <param name="collectionParameterName">The name from collectionParameter to use. Default is x.</param>
            <param name="resultSelector">A projection function to apply to each element of each intermediate sequence.</param>
            <param name="resultParameterName">The name from resultParameterName to use. Default is y.</param>
            <param name="collectionSelectorArgs">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="resultSelectorArgs">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking the one-to-many 
            projection function <paramref name="collectionSelector"/> on each element of source and then mapping
            each of those sequence elements and their corresponding source element to a result element.
            </returns>
            <example>
            <code>
            <![CDATA[
            // TODO
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.String,System.String,System.String,System.String,System.Object[],System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.String,System.String,System.String,System.Object[],System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Single(System.Linq.IQueryable)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> to return the single element of.</param>
            <returns>The single element of the input sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Single(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Single(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Single(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Single(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SingleOrDefault(System.Linq.IQueryable)">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence
            is empty; this method throws an exception if there is more than one element
            in the sequence.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> to return the single element of.</param>
            <returns>The single element of the input sequence, or default if the sequence contains no elements.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SingleOrDefault(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition or a default value if the sequence
            is empty; and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SingleOrDefault(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.SingleOrDefault(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SingleOrDefault(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition or a default value if the sequence
            is empty; and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> to return elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> that contains elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SkipWhile(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <param name="source">A sequence to check for being empty.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.SkipWhile("Income > 50");
            var result2 = queryable.SkipWhile("Income > @0", 50);
            </code>
            </example>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains elements from source starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.SkipWhile(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.SkipWhile(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Sum(System.Linq.IQueryable)">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the sum of.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Sum();
            var result2 = queryable.Select("Roles.Sum()");
            </code>
            </example>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Sum(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the sum of.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Sum("Income");
            </code>
            </example>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Sum(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Sum(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Sum(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the sum of.</param>
            <param name="lambda">A Lambda Expression.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> that contains the specified number of elements from the start of source.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.TakeWhile(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
            <param name="source">A sequence to check for being empty.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.TakeWhile("Income > 50");
            var result2 = queryable.TakeWhile("Income > @0", 50);
            </code>
            </example>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains elements from the input sequence occurring before the element at which the test specified by predicate no longer passes.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.TakeWhile(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.TakeWhile(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
            <example>
            <code>
            <![CDATA[
            var result = queryable.OrderBy<User>("LastName");
            var resultSingle = result.ThenBy<User>("NumberProperty");
            var resultSingleDescending = result.ThenBy<User>("NumberProperty DESC");
            var resultMultiple = result.ThenBy<User>("NumberProperty, StringProperty");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
            <example>
            <code>
            var result = queryable.OrderBy("LastName");
            var resultSingle = result.OrderBy("NumberProperty");
            var resultSingleDescending = result.OrderBy("NumberProperty DESC");
            var resultMultiple = result.OrderBy("NumberProperty, StringProperty DESC");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,System.String,System.Collections.IComparer,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Where``1(System.Linq.IQueryable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A <see cref="T:System.Linq.IQueryable`1"/> to filter.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">An expression string to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> that contains elements from the input sequence that satisfy the condition specified by predicate.</returns>
            <example>
            <code language="cs">
            var result1 = queryable.Where("NumberProperty = 1");
            var result2 = queryable.Where("NumberProperty = @0", 1);
            var result3 = queryable.Where("StringProperty = null");
            var result4 = queryable.Where("StringProperty = \"abc\"");
            var result5 = queryable.Where("StringProperty = @0", "abc");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Where``1(System.Linq.IQueryable{``0},Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Where(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> to filter.</param>
            <param name="config">The <see cref="T:Skywalker.Extensions.Linq.ParsingConfig"/>.</param>
            <param name="predicate">An expression string to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> that contains elements from the input sequence that satisfy the condition specified by predicate.</returns>
            <example>
            <code>
            var result1 = queryable.Where("NumberProperty = 1");
            var result2 = queryable.Where("NumberProperty = @0", 1);
            var result3 = queryable.Where("StringProperty = null");
            var result4 = queryable.Where("StringProperty = \"abc\"");
            var result5 = queryable.Where("StringProperty = @0", "abc");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Where(System.Linq.IQueryable,Skywalker.Extensions.Linq.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> to filter.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> that contains elements from the input sequence that satisfy the condition specified by LambdaExpression.</returns>
        </member>
        <member name="M:System.Linq.DynamicQueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.LambdaExpression)">
            <inheritdoc cref="M:System.Linq.DynamicQueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)"/>
        </member>
        <member name="M:System.Linq.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Linq.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <paramref name="condition"/></returns>
        </member>
        <member name="T:System.NullDisposable">
            <summary>
            This class is used to simulate a Disposable that does nothing.
            </summary>
        </member>
        <member name="T:System.ObjectExtensions">
            <summary>
            Extension methods for all objects.
            </summary>
        </member>
        <member name="M:System.ObjectExtensions.As``1(System.Object)">
            <summary>
            Used to simplify and beautify casting an object to a type. 
            </summary>
            <typeparam name="T">Type to be casted</typeparam>
            <param name="obj">Object to cast</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:System.ObjectExtensions.To``1(System.Object)">
            <summary>
            Converts given object to a value type using <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)"/> method.
            </summary>
            <param name="object">Object to be converted</param>
            <typeparam name="T">Type of the target object</typeparam>
            <returns>Converted object</returns>
        </member>
        <member name="M:System.ObjectExtensions.IsIn``1(``0,``0[])">
            <summary>
            Check if an item is in a list.
            </summary>
            <param name="item">Item to check</param>
            <param name="list">List of items</param>
            <typeparam name="T">Type of the items</typeparam>
        </member>
        <member name="M:System.ObjectExtensions.Locking``1(``0,System.Action{``0})">
            <summary>
            Executes given <paramref name="action"/> by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="action">Action (to be executed)</param>
        </member>
        <member name="M:System.ObjectExtensions.Locking``1(System.Object,System.Func{``0})">
            <summary>
            Executes given <paramref name="func"/> and returns it's value by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="func">Function (to be executed)</param>
            <returns>Return value of the <paramref name="func"/></returns>
        </member>
        <member name="M:System.ObjectExtensions.Locking``2(``0,System.Func{``0,``1})">
            <summary>
            Executes given <paramref name="func"/> and returns it's value by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="func">Function (to be executed)</param>
            <returns>Return value of the <paramnref name="func"/></returns>
        </member>
        <member name="M:System.ObjectId.AddTypeDescriptor">
            <summary>
            System.Text.Json.JsonSerializer 需要注册类型
            </summary>
        </member>
        <member name="M:System.ObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:System.ObjectId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:System.ObjectId.Empty">
            <summary>
            Gets an instance of ObjectId where the value is empty.
            </summary>
        </member>
        <member name="P:System.ObjectId.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:System.ObjectId.Machine">
            <summary>
            Gets the machine.
            </summary>
        </member>
        <member name="P:System.ObjectId.Pid">
            <summary>
            Gets the PID.
            </summary>
        </member>
        <member name="P:System.ObjectId.Increment">
            <summary>
            Gets the increment.
            </summary>
        </member>
        <member name="P:System.ObjectId.CreationTime">
            <summary>
            Gets the creation time (derived from the timestamp).
            </summary>
        </member>
        <member name="M:System.ObjectId.op_LessThan(System.ObjectId,System.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than the second ObjectId.</returns>
        </member>
        <member name="M:System.ObjectId.op_LessThanOrEqual(System.ObjectId,System.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:System.ObjectId.op_Equality(System.ObjectId,System.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:System.ObjectId.op_Inequality(System.ObjectId,System.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are not equal.</returns>
        </member>
        <member name="M:System.ObjectId.op_GreaterThanOrEqual(System.ObjectId,System.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:System.ObjectId.op_GreaterThan(System.ObjectId,System.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than the second ObjectId.</returns>
        </member>
        <member name="M:System.ObjectId.CreateId">
            <summary>
            Generates a new ObjectId with a unique value.
            </summary>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:System.ObjectId.CreateId(System.DateTime)">
            <summary>
            Generates a new ObjectId with a unique value (with the timestamp component based on a given DateTime).
            </summary>
            <param name="timestamp">The timestamp component (expressed as a DateTime).</param>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:System.ObjectId.CreateId(System.Int32)">
            <summary>
            Generates a new ObjectId with a unique value (with the given timestamp).
            </summary>
            <param name="timestamp">The timestamp component.</param>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:System.ObjectId.Parse(System.String)">
            <summary>
            Parses a string and creates a new ObjectId.
            </summary>
            <param name="s">The string value.</param>
            <returns>A ObjectId.</returns>
        </member>
        <member name="M:System.ObjectId.TryParse(System.String,System.ObjectId@)">
            <summary>
            Tries to parse a string and create a new ObjectId.
            </summary>
            <param name="s">The string value.</param>
            <param name="objectId">The new ObjectId.</param>
            <returns>True if the string was parsed successfully.</returns>
        </member>
        <member name="M:System.ObjectId.Unpack(System.Byte[],System.Int32@,System.Int32@,System.Int16@,System.Int32@)">
            <summary>
            Unpacks a byte array into the components of an ObjectId.
            </summary>
            <param name="bytes">A byte array.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:System.ObjectId.GetCurrentProcessId">
            <summary>
            Gets the current process id.  This method exists because of how CAS operates on the call stack, checking
            for permissions before executing the method.  Hence, if we inlined this call, the calling method would not execute
            before throwing an exception requiring the try/catch at an even higher level that we don't necessarily control.
            </summary>
        </member>
        <member name="M:System.ObjectId.ToUniversalTime(System.DateTime)">
            <summary>
            Converts a DateTime to UTC (with special handling for MinValue and MaxValue).
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>The DateTime in UTC.</returns>
        </member>
        <member name="M:System.ObjectId.CompareTo(System.ObjectId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="other">The other ObjectId.</param>
            <returns>A 32-bit signed integer that indicates whether this ObjectId is less than, equal to, or greather than the other.</returns>
        </member>
        <member name="M:System.ObjectId.Equals(System.ObjectId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:System.ObjectId.Equals(System.Object)">
            <summary>
            Compares this ObjectId to another object.
            </summary>
            <param name="other">The other object.</param>
            <returns>True if the other object is an ObjectId and equal to this one.</returns>
        </member>
        <member name="M:System.ObjectId.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:System.ObjectId.ToByteArray">
            <summary>
            Converts the ObjectId to a byte array.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:System.ObjectId.TryParseHexString(System.String,System.Byte[]@)">
            <summary>
            Tries to parse a hex string to a byte array.
            </summary>
            <param name="s">The hex string.</param>
            <param name="bytes">A byte array.</param>
            <returns>True if the hex string was successfully parsed.</returns>
        </member>
        <member name="M:System.ObjectId.ToByteArray(System.Byte[],System.Int32)">
            <summary>
            Converts the ObjectId to a byte array.
            </summary>
            <param name="destination">The destination.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:System.ObjectId.ToString">
            <summary>
            Returns a string representation of the value.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:System.ObjectId.ToHexChar(System.Int32)">
            <summary>
            Converts a value to a hex character.
            </summary>
            <param name="value">The value (assumed to be between 0 and 15).</param>
            <returns>The hex character.</returns>
        </member>
        <member name="M:System.Reflection.Emit.GenericTypeParameterBuilderExtensions.AsType(System.Reflection.Emit.GenericTypeParameterBuilder)">
            <summary>
            https://github.com/castleproject/Core/blob/netcore/src/Castle.Core/Compatibility/CustomTypeBuilderExtensions.cs
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.MemberInfoExtensions.GetSingleAttributeOrNull``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets a single attribute for a member.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">The member that will be checked for the attribute</param>
            <param name="inherit">Include inherited attributes</param>
            <returns>Returns the attribute object if found. Returns null if not found.</returns>
        </member>
        <member name="M:System.Reflection.PropertyHelper.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a fast <see cref="T:System.Reflection.PropertyHelper"/>.
            This constructor does not cache the helper. For caching, use <see cref="M:System.Reflection.PropertyHelper.GetProperties(System.Type)"/>.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyHelper.Property">
            <summary>
            Gets the backing <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyHelper.Name">
            <summary>
            Gets (or sets in derived types) the property name.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyHelper.ValueGetter">
            <summary>
            Gets the property value getter.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyHelper.ValueSetter">
            <summary>
            Gets the property value setter.
            </summary>
        </member>
        <member name="M:System.Reflection.PropertyHelper.GetValue(System.Object)">
            <summary>
            Returns the property value for the specified <paramref name="instance"/>.
            </summary>
            <param name="instance">The object whose property value will be returned.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:System.Reflection.PropertyHelper.SetValue(System.Object,System.Object)">
            <summary>
            Sets the property value for the specified <paramref name="instance" />.
            </summary>
            <param name="instance">The object whose property value will be set.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:System.Reflection.PropertyHelper.GetProperties(System.Reflection.TypeInfo)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            underlying type.
            </summary>
            <param name="typeInfo">The type info to extract property accessors for.</param>
            <returns>A cached array of all public properties of the specified type.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyHelper.GetProperties(System.Type)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            specified type.
            </summary>
            <param name="type">The type to extract property accessors for.</param>
            <returns>A cached array of all public properties of the specified type.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyHelper.GetVisibleProperties(System.Reflection.TypeInfo)">
            <summary>
            <para>
            Creates and caches fast property helpers that expose getters for every non-hidden get property
            on the specified type.
            </para>
            <para>
            <see cref="M:GetVisibleProperties"/> excludes properties defined on base types that have been
            hidden by definitions using the <c>new</c> keyword.
            </para>
            </summary>
            <param name="typeInfo">The type info to extract property accessors for.</param>
            <returns>
            A cached array of all public properties of the specified type.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyHelper.GetVisibleProperties(System.Type)">
            <summary>
            <para>
            Creates and caches fast property helpers that expose getters for every non-hidden get property
            on the specified type.
            </para>
            <para>
            <see cref="M:GetVisibleProperties"/> excludes properties defined on base types that have been
            hidden by definitions using the <c>new</c> keyword.
            </para>
            </summary>
            <param name="type">The type to extract property accessors for.</param>
            <returns>
            A cached array of all public properties of the specified type.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyHelper.MakeFastPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property getter. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the getter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed.
            </remarks>
        </member>
        <member name="M:System.Reflection.PropertyHelper.MakeNullSafeFastPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property getter which is safe for a null input object. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the getter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed.
            </remarks>
        </member>
        <member name="M:System.Reflection.PropertyHelper.MakeFastPropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property setter for reference types. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the setter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed. This only works for reference types.
            </remarks>
        </member>
        <member name="M:System.Reflection.PropertyHelper.ObjectToDictionary(System.Object)">
             <summary>
             Given an object, adds each instance property with a public get method as a key and its
             associated value to a dictionary.
            
             If the object is already an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, then a copy
             is returned.
             </summary>
             <remarks>
             The implementation of PropertyHelper will cache the property accessors per-type. This is
             faster when the same type is used multiple times with ObjectToDictionary.
             </remarks>
        </member>
        <member name="T:System.Reflection.ReflectionHelper">
            <summary>
            Defines helper methods for reflection.
            </summary>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Checks whether <paramref name="givenType"/> implements/inherits <paramref name="genericType"/>.
            </summary>
            <param name="givenType">Type to check</param>
            <param name="genericType">Generic type</param>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.GetSingleAttributeOrDefault``1(System.Reflection.MemberInfo,``0,System.Boolean)">
            <summary>
            Tries to gets an of attribute defined for a class member and it's declaring type including inherited attributes.
            Returns default value if it's not declared at all.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="defaultValue">Default value (null as default)</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.GetSingleAttributeOfMemberOrDeclaringTypeOrDefault``1(System.Reflection.MemberInfo,``0,System.Boolean)">
            <summary>
            Tries to gets an of attribute defined for a class member and it's declaring type including inherited attributes.
            Returns default value if it's not declared at all.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="defaultValue">Default value (null as default)</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.GetAttributesOfMemberOrDeclaringType``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Tries to gets attributes defined for a class member and it's declaring type including inherited attributes.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.GetValueByPath(System.Object,System.Type,System.String)">
            <summary>
            Gets value of a property by it's full path from given object
            </summary>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.SetValueByPath(System.Object,System.Type,System.String,System.Object)">
            <summary>
            Sets value of a property by it's full path on given object
            </summary>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.GetPublicConstantsRecursively(System.Type)">
            <summary>
            Get all the constant values in the specified type (including the base type).
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:System.Reflection.TypeInfoExtensions">
            <summary>
            https://github.com/castleproject/Core/blob/netcore/src/Castle.Core/Compatibility/IntrospectionExtensions.cs
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.AU">
            <summary>
            澳大利亚
            Australia
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.BE">
            <summary>
            比利时
            Belgium (The Kingdom of Belgium)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.BR">
            <summary>
            巴西
            Brazil (The Federative Republic of Brazil)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.CN">
            <summary>
            中国
            China (The People's Republic of China)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.CZ">
            <summary>
            捷克
            Czech Republic (The Czech Republic)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.DE">
            <summary>
            德国
            Germany (He Federal Republic of Germany)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.DK">
            <summary>
            丹麦
            Denmark (The Kingdom of Denmark)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.DZ">
            <summary>
            阿尔及利亚
            Algeria (The People's Democratic Republic of Algeria)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.ES">
            <summary>
            西班牙
            Spain (The Kingdom of Spain)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.FI">
            <summary>
            芬兰
            Finland (The Republic of Finland)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.FR">
            <summary>
            法国
            France (The French Republic)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.GB">
            <summary>
            英国
            United Kingdom (The United Kingdom of Great Britain and Northern Ireland)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.GR">
            <summary>
            希腊
            Greece (The Hellenic Republic)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.HK">
            <summary>
            中国香港
            Hong Kong (The Hong Kong Special Administrative Region of China)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.HU">
            <summary>
            匈牙利
            Hungary (The Republic of Hungary)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.IN">
            <summary>
            印度
            India (The Republic of India)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.IT">
            <summary>
            意大利
            Italy (The Republic of Italy)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.JP">
            <summary>
            日本
            Japan
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.MY">
            <summary>
            Malaysia (马来西亚)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.NO">
            <summary>
            挪威
            Norway (The Kingdom of Norway)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.NZ">
            <summary>
            新西兰
            New Zealand
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.PL">
            <summary>
            波兰
            Poland (The Republic of Poland)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.PT">
            <summary>
            葡萄牙
            Portugal (The Portuguese Republic)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.RS">
            <summary>
            塞尔维亚
            Serbia (The Republic of Serbia)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.RU">
            <summary>
            俄罗斯联邦
            Russian Federation (The Russian Federation)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.SA">
            <summary>
            沙特阿拉伯
            Saudi Arabia (The Kingdom of Saudi Arabia)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.SY">
            <summary>
            叙利亚
            Syrian Arab Republic (The Syrian Arab Republic)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.TR">
            <summary>
            土耳其
            Turkey (The Republic of Turkey)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.TW">
            <summary>
            中国台湾
            Taiwan (Province of China)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.US">
            <summary>
            美国
            United States (The United States of America)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.VN">
            <summary>
            越南
            Viet Nam (The Socialist Republic of Viet Nam)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.ZA">
            <summary>
            南非
            South Africa (The Republic of South Africa)
            </summary>
        </member>
        <member name="F:System.RegexConstants.MobileNumber.ZM">
            <summary>
            赞比亚
            Zambia (The Republic of Zambia)
            </summary>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Extension methods for String class.
            </summary>
        </member>
        <member name="M:System.StringExtensions.EnsureEndsWith(System.String,System.Char)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:System.StringExtensions.EnsureEndsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:System.StringExtensions.EnsureEndsWith(System.String,System.Char,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:System.StringExtensions.EnsureStartsWith(System.String,System.Char)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:System.StringExtensions.EnsureStartsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:System.StringExtensions.EnsureStartsWith(System.String,System.Char,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether this string is null or an System.String.Empty string.
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            indicates whether this string is null, empty, or consists only of white-space characters.
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsEmptyOrWhiteSpace(System.String)">
            <summary>
            indicates whether this string is empty, or consists only of white-space characters.
            </summary>
            <exception cref="T:System.ArgumentNullException">If this string is null</exception>
        </member>
        <member name="M:System.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="len"/> is bigger that string's length</exception>
        </member>
        <member name="M:System.StringExtensions.NormalizeLineEndings(System.String)">
            <summary>
            Converts line endings in the string to <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.NthIndexOf(System.String,System.Char,System.Int32)">
            <summary>
            Gets index of nth occurence of a char in a string.
            </summary>
            <param name="str">source string to be searched</param>
            <param name="c">Char to search in <see cref="!:str"/></param>
            <param name="n">Count of the occurence</param>
        </member>
        <member name="M:System.StringExtensions.RemovePostFix(System.String,System.String[])">
            <summary>
            Removes first occurrence of the given postfixes from end of the given string.
            Ordering is important. If one of the postFixes is matched, others will not be tested.
            </summary>
            <param name="str">The string.</param>
            <param name="postFixes">one or more postfix.</param>
            <returns>Modified string or the same string if it has not any of given postfixes</returns>
        </member>
        <member name="M:System.StringExtensions.RemovePreFix(System.String,System.String[])">
            <summary>
            Removes first occurrence of the given prefixes from beginning of the given string.
            Ordering is important. If one of the preFixes is matched, others will not be tested.
            </summary>
            <param name="str">The string.</param>
            <param name="preFixes">one or more prefix.</param>
            <returns>Modified string or the same string if it has not any of given prefixes</returns>
        </member>
        <member name="M:System.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from end of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="len"/> is bigger that string's length</exception>
        </member>
        <member name="M:System.StringExtensions.Split(System.String,System.String)">
            <summary>
            Uses string.Split method to split given string by given separator.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
            Uses string.Split method to split given string by given separator.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SplitToLines(System.String)">
            <summary>
            Uses string.Split method to split given string by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SplitToLines(System.String,System.StringSplitOptions)">
            <summary>
            Uses string.Split method to split given string by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String,System.Boolean)">
            <summary>
            Converts PascalCase string to camelCase string.
            </summary>
            <param name="str">String to convert</param>
            <param name="invariantCulture">Invariant culture</param>
            <returns>camelCase of the string</returns>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts PascalCase string to camelCase string in specified culture.
            </summary>
            <param name="str">String to convert</param>
            <param name="culture">An object that supplies culture-specific casing rules</param>
            <returns>camelCase of the string</returns>
        </member>
        <member name="M:System.StringExtensions.ToSentenceCase(System.String,System.Boolean)">
            <summary>
            Converts given PascalCase/camelCase string to sentence (by splitting words by space).
            Example: "ThisIsSampleSentence" is converted to "This is a sample sentence".
            </summary>
            <param name="str">String to convert.</param>
            <param name="invariantCulture">Invariant culture</param>
        </member>
        <member name="M:System.StringExtensions.ToSentenceCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts given PascalCase/camelCase string to sentence (by splitting words by space).
            Example: "ThisIsSampleSentence" is converted to "This is a sample sentence".
            </summary>
            <param name="str">String to convert.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
        </member>
        <member name="M:System.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Converts string to enum value.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:System.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Converts string to enum value.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <param name="ignoreCase">Ignore case</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:System.StringExtensions.ToPascalCase(System.String,System.Boolean)">
            <summary>
            Converts camelCase string to PascalCase string.
            </summary>
            <param name="str">String to convert</param>
            <param name="invariantCulture">Invariant culture</param>
            <returns>PascalCase of the string</returns>
        </member>
        <member name="M:System.StringExtensions.ToPascalCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts camelCase string to PascalCase string in specified culture.
            </summary>
            <param name="str">String to convert</param>
            <param name="culture">An object that supplies culture-specific casing rules</param>
            <returns>PascalCase of the string</returns>
        </member>
        <member name="M:System.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.TruncateWithPostfix(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            It adds a "..." postfix to end of the string if it's truncated.
            Returning string can not be longer than maxLength.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.TruncateWithPostfix(System.String,System.Int32,System.String)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            It adds given <paramref name="postfix"/> to end of the string if it's truncated.
            Returning string can not be longer than maxLength.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.ToStringWithoutBom(System.Byte[],System.Text.Encoding)">
            <summary>
            使用指定编码<paramref name="encoding"/>将 byte[] 转换为字符串, 使用不带 BOM（字节顺序标记）的 <paramref name="encoding"/> 编码。
            </summary>
            <param name="bytes">要转换为字符串的 byte[]</param>
            <param name="encoding">获取字符串的编码.</param>
            <returns>使用指定编码<paramref name="encoding"/>转换后的字符串</returns>
        </member>
        <member name="M:System.StringExtensions.ToStringWithoutBom(System.Byte[])">
            <summary>
            将 byte[] 转换为字符串，使用不带 BOM（字节顺序标记）的 UTF 8 编码。
            </summary>
            <param name="bytes">要转换为字符串的 byte[]</param>
            <returns>使用指定<see cref="P:System.Text.Encoding.UTF8"/>编码转换后的字符串</returns>
        </member>
        <member name="T:System.Threading.ReaderWriterLockSlimExtensions">
            <summary>
            Lock helper to make locking easier.
            </summary>
        </member>
        <member name="M:System.TypeExtensions.GetBestName(System.Type)">
            <summary>
            Find the best available name to describe a type.
            </summary>
            <remarks>
            Usually the best name will be <see cref="P:System.Type.FullName"/>, but
            sometimes that's null (see http://msdn.microsoft.com/en-us/library/system.type.fullname%28v=vs.110%29.aspx)
            in which case the method falls back to <see cref="P:System.Reflection.MemberInfo.Name"/>.
            </remarks>
            <param name="type">the type to name</param>
            <returns>the best name</returns>
        </member>
        <member name="M:System.TypeExtensions.IsAssignableTo``1(System.Type)">
             <summary>
             Determines whether an instance of this type can be assigned to
             an instance of the <typeparamref name="TTarget"></typeparamref>.
            
             Internally uses <see cref="M:System.Type.IsAssignableFrom(System.Type)"/>.
             </summary>
             <typeparam name="TTarget">Target type</typeparam> (as reverse).
        </member>
        <member name="M:System.TypeExtensions.IsAssignableTo(System.Type,System.Type)">
             <summary>
             Determines whether an instance of this type can be assigned to
             an instance of the <paramref name="targetType"></paramref>.
            
             Internally uses <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> (as reverse).
             </summary>
             <param name="type">this type</param>
             <param name="targetType">Target type</param>
        </member>
        <member name="M:System.TypeExtensions.GetBaseClasses(System.Type,System.Boolean)">
            <summary>
            Gets all base classes of this type.
            </summary>
            <param name="type">The type to get its base classes.</param>
            <param name="includeObject">True, to include the standard <see cref="T:System.Object"/> type in the returned array.</param>
        </member>
        <member name="M:System.UriUtilities.CanonicalizeUrl(System.String,System.String)">
            <summary>
            计算最终的URL
            </summary>
            <param name="uri">Base uri</param>
            <param name="relativeUri">Relative uri</param>
            <returns>最终的URL</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
