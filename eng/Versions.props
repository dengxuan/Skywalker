<Project>

  <PropertyGroup>

    <!-- The .NET product branding version -->
    <ProductVersion>3.0.30</ProductVersion>
    <!-- File version numbers -->
    <MajorVersion>3</MajorVersion>
    <MinorVersion>0</MinorVersion>
    <PatchVersion>30</PatchVersion>
    <SdkBandVersion>2.0.0</SdkBandVersion>
    <PreReleaseVersionLabel>alpha</PreReleaseVersionLabel>
    <PreReleaseVersionIteration>2</PreReleaseVersionIteration>
    <!-- Set assembly version to align with major and minor version,
         as for the patches and revisions should be manually updated per assembly if it is serviced. -->
    <AssemblyVersion>$(MajorVersion).$(MinorVersion).0.0</AssemblyVersion>
    <!-- Enable to remove prerelease label. -->
    <StabilizePackageVersion Condition="'$(StabilizePackageVersion)' == ''">false</StabilizePackageVersion>
    <DotNetFinalVersionKind Condition="'$(StabilizePackageVersion)' == 'true'">release</DotNetFinalVersionKind>
    <!-- Opt-in/out repo features -->
    <UsingToolMicrosoftNetILLinkTasks>true</UsingToolMicrosoftNetILLinkTasks>
    <UsingToolIbcOptimization>false</UsingToolIbcOptimization>
    <UsingToolXliff>false</UsingToolXliff>
    <LastReleasedStableAssemblyVersion>$(AssemblyVersion)</LastReleasedStableAssemblyVersion>
    <PackageVersion>$(MajorVersion).$(MinorVersion).$(PatchVersion)</PackageVersion>
  </PropertyGroup>
  <!--
    Servicing build settings for Setup/Installer packages. Instructions:

    * To enable a package build for the current patch release, set PatchVersion to match the current
      patch version of that package. ("major.minor.patch".) This is normally the same as
      PatchVersion above, but not always. Notably, NETStandard has its own patch version.
    * When the PatchVersion property above is incremented at the beginning of the next servicing
      release, all packages listed below automatically stop building because the property no longer
      matches the metadata. (Do not delete the items!)

    If the PatchVersion below is never changed from '0', the package will build in the 'main'
    branch, and during a forked RTM release ("X.Y.0"). It will stop building for "X.Y.1" unless
    manually enabled by updating the metadata.
  -->
  <ItemGroup>
    <!-- Targeting packs are only patched in extreme cases. -->
    <ProjectServicingConfiguration Include="Microsoft.NETCore.App.Ref" PatchVersion="0" />
  </ItemGroup>
  <PropertyGroup>
    <!-- For source generator support we need to target multiple versions of Rolsyn in order to be able to run on older versions of Roslyn -->
    <MicrosoftCodeAnalysisCSharpWorkspacesVersion_3_11>3.11.0</MicrosoftCodeAnalysisCSharpWorkspacesVersion_3_11>
    <MicrosoftCodeAnalysisCSharpWorkspacesVersion>4.0.1</MicrosoftCodeAnalysisCSharpWorkspacesVersion>
  </PropertyGroup>
</Project>
