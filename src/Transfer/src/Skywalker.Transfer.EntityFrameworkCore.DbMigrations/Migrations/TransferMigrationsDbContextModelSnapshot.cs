// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skywalker.Ddd.EntityFrameworkCore;
using Skywalker.Transfer.EntityFrameworkCore;

namespace Skywalker.Transfer.EntityFrameworkCore.DbMigrations.Migrations
{
    [DbContext(typeof(TransferMigrationsDbContext))]
    partial class TransferMigrationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Skywalker_DatabaseProvider", EntityFrameworkCoreDatabaseProvider.MySql)
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Skywalker.Transfer.Domain.Merchants.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Scheme")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                    b.Property<string>("Number")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("CipherKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<byte>("MerchantType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4");

                    b.HasKey("Id", "Scheme", "Number");

                    b.ToTable("TsfrMerchants");
                });

            modelBuilder.Entity("Skywalker.Transfer.Domain.TradeOrders.TradeOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("HandlingFee")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MerchantNumber")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("MerchantScheme")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                    b.Property<string>("RevokeReason")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RevokeTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TradeAuditedType")
                        .HasColumnType("int");

                    b.Property<byte>("TradeOrderType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<Guid>("TraderId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Withholding")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("TraderId");

                    b.HasIndex("MerchantId", "MerchantScheme", "MerchantNumber");

                    b.ToTable("TsfrTradeOrders");
                });

            modelBuilder.Entity("Skywalker.Transfer.Domain.TradeUsers.Trader", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime");

                    b.Property<byte>("TraderType")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("TsfrTraders");
                });

            modelBuilder.Entity("Skywalker.Transfer.Domain.TransferDetails.TransferDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4");

                    b.Property<Guid>("TraderId")
                        .HasColumnType("char(36)");

                    b.Property<byte>("TransferType")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("TraderId");

                    b.ToTable("TsfrTransferDetails");
                });

            modelBuilder.Entity("Skywalker.Transfer.Domain.TradeOrders.TradeOrder", b =>
                {
                    b.HasOne("Skywalker.Transfer.Domain.TradeUsers.Trader", "Trader")
                        .WithMany("TradeOrders")
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skywalker.Transfer.Domain.Merchants.Merchant", "Merchant")
                        .WithMany("TradeOrders")
                        .HasForeignKey("MerchantId", "MerchantScheme", "MerchantNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("Skywalker.Transfer.Domain.TransferDetails.TransferDetail", b =>
                {
                    b.HasOne("Skywalker.Transfer.Domain.TradeUsers.Trader", "Trader")
                        .WithMany("TransferDetails")
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("Skywalker.Transfer.Domain.Merchants.Merchant", b =>
                {
                    b.Navigation("TradeOrders");
                });

            modelBuilder.Entity("Skywalker.Transfer.Domain.TradeUsers.Trader", b =>
                {
                    b.Navigation("TradeOrders");

                    b.Navigation("TransferDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
