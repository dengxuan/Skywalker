// Licensed to the Gordon under one or more agreements.
// Gordon licenses this file to you under the MIT license.

using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Skywalker.Ddd.EntityFrameworkCore.Generators;

public partial class DddEntityFrameworkCoreGenerator
{
    internal class Emitter
    {
        private const int DefaultStringBuilderCapacity = 1024;
        private static readonly string s_generatedCodeAttribute = @$"[System.CodeDom.Compiler.GeneratedCodeAttribute(""{typeof(Emitter).Assembly.GetName().Name}"", ""{typeof(Emitter).Assembly.GetName().Version}"")]";

        private static readonly StringBuilder s_builder = new(DefaultStringBuilderCapacity);
        // <auto-generated>
        //     Generated by the Skywalker DddEntityFrameworkCoreGenerator.
        // </auto-generated>
        public static void Emit(GeneratorExecutionContext context, IReadOnlyList<DbContextClass> dbContextClasses)
        {
            s_builder.Clear();
            s_builder.AppendLine("// <auto-generated>");
            s_builder.AppendLine("//     Generated by the Skywalker.Ddd.EntityFrameworkCore.Generators");
            s_builder.AppendLine("// </auto-generated>");
            s_builder.AppendLine();
            s_builder.AppendLine($"using Microsoft.Extensions.DependencyInjection.Extensions;");
            s_builder.AppendLine($"using Skywalker.Ddd.EntityFrameworkCore.Repositories;");
            s_builder.AppendLine();
            s_builder.AppendLine("#nullable enable");
            s_builder.AppendLine();
            s_builder.AppendLine($"namespace Microsoft.Extensions.DependencyInjection;");
            s_builder.AppendLine();
            foreach (var dbContextClass in dbContextClasses)
            {
                s_builder.AppendLine($"{s_generatedCodeAttribute}");
                s_builder.AppendLine("public static class IServiceCollectionExtensions");
                s_builder.AppendLine("{");
                s_builder.AppendLine($"\tpublic static IServiceCollection Add{dbContextClass.Name}s(this IServiceCollection services)");
                s_builder.AppendLine("\t{");
                foreach (var dbContextProperty in dbContextClass.Properties)
                {
                    s_builder.AppendLine($"\t\tservices.TryAddTransient<IRepository<{ dbContextProperty.Fullname }>, Repository<{ dbContextClass.Fullname }, { dbContextProperty.Fullname }>>();");
                    s_builder.AppendLine($"\t\tservices.TryAddTransient<IBasicRepository<{ dbContextProperty.Fullname }>, Repository<{ dbContextClass.Fullname }, { dbContextProperty.Fullname }>>();");
                    s_builder.AppendLine($"\t\tservices.TryAddTransient<IReadOnlyRepository<{ dbContextProperty.Fullname }>, Repository<{ dbContextClass.Fullname }, { dbContextProperty.Fullname }>>();");
                    if (!string.IsNullOrEmpty(dbContextProperty.PrimaryKey))
                    {
                        s_builder.AppendLine($"\t\tservices.TryAddTransient<IRepository<{ dbContextProperty.Fullname }, { dbContextProperty.PrimaryKey }>, Repository<{ dbContextClass.Fullname }, { dbContextProperty.Fullname }, { dbContextProperty.PrimaryKey }>>();");
                        s_builder.AppendLine($"\t\tservices.TryAddTransient<IBasicRepository<{ dbContextProperty.Fullname }, { dbContextProperty.PrimaryKey }>, Repository<{ dbContextClass.Fullname }, { dbContextProperty.Fullname }, { dbContextProperty.PrimaryKey }>>();");
                        s_builder.AppendLine($"\t\tservices.TryAddTransient<IReadOnlyRepository<{ dbContextProperty.Fullname }, { dbContextProperty.PrimaryKey }>, Repository<{ dbContextClass.Fullname }, { dbContextProperty.Fullname }, { dbContextProperty.PrimaryKey }>>();");
                    }
                }
                s_builder.AppendLine("\t\treturn services;");
                s_builder.AppendLine("\t}");
                s_builder.AppendLine("}");
            }

            context.AddSource("Skywalker.Ddd.EntityFrameworkCore.g.cs", SourceText.From(s_builder.ToString(), Encoding.UTF8));
        }
    }
}
