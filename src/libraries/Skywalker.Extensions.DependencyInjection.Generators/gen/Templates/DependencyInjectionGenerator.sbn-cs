// <auto-generated>
//     Generated by the Skywalker Interceptor Generators.
// </auto-generated>

#pragma warning disable CS8019 // Unused usings

{{~ for namespace in Namespaces ~}}
using {{namespace}};
{{~ end ~}}

namespace Skywalker.Extensions.DependencyInjection.Generators;

[GeneratedCode("Skywalker.Extensions.InterceptorGenerator.Generators", "{{ GeneratorVersion }}")]
internal static class DependencyInjectionIServiceCollectionExtensions
{
    
    private static IServiceCollection AddIntecepters(this IServiceCollection services)
    {
    {{~ for dependency in IntecepterDepedency ~}}
    {{~ for interface in dependency.Interfaces ~}}
        services.AddScoped<{{interface}}, {{dependency.Name}}>();
    {{~ end ~}}
    {{~ end ~}}
        return services;
    }

    private static IServiceCollection AddScopedDependency(this IServiceCollection services)
    {
    {{~ for dependency in ScopedDepedency ~}}
    {{~ for interface in dependency.Interfaces ~}}
        services.AddScoped<{{interface}}, {{dependency.Name}}>();
    {{~ end ~}}
    {{~ end ~}}
        return services;
    }
    
    private static IServiceCollection AddSingletonDepedency(this IServiceCollection services)
    {
    {{~ for dependency in SingletonDepedency ~}}
    {{~ for interface in dependency.Interfaces ~}}
        services.AddSingleton<{{interface}}, {{dependency.Name}}>();
    {{~ end ~}}
    {{~ end ~}}
        return services;
    }

    private static IServiceCollection AddTransientDepedency(this IServiceCollection services)
    {
    {{~ for dependency in TransientDepedency ~}}
    {{~ for interface in dependency.Interfaces ~}}
        services.AddTransient<{{interface}}, {{dependency.Name}}>();
    {{~ end ~}}
    {{~ end ~}}
        return services;
    }

    public static IServiceCollection AddSkywalker(this IServiceCollection services)
    {
         services.AddIntecepters();
         services.AddScopedDependency();
         services.AddSingletonDepedency();
         services.AddTransientDepedency();
         return services;
    }
    
    {{~ for class in Classes ~}}
    {{class}}
    {{~ end ~}}
}
