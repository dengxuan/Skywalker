<Project>
  <PropertyGroup>
    <!-- Override strong name key to default to Open for test projects,
         Tests which wish to control this should set TestStrongNameKeyId. -->
    <TestStrongNameKeyId Condition="'$(TestStrongNameKeyId)' == '' and $(MSBuildProjectName.StartsWith('Microsoft.Extensions.'))">MicrosoftAspNetCore</TestStrongNameKeyId>
    <TestStrongNameKeyId Condition="'$(TestStrongNameKeyId)' == ''">Open</TestStrongNameKeyId>
    <StrongNameKeyId Condition="'$(IsTestProject)' == 'true' or '$(IsTestSupportProject)' == 'true'">$(TestStrongNameKeyId)</StrongNameKeyId>
  </PropertyGroup>

  <Import Project="..\..\Directory.Build.targets" />

  <PropertyGroup>
    <NetCoreAppCurrentBuildSettings>$(NetCoreAppCurrent)-$(TargetOS)-$(Configuration)-$(TargetArchitecture)</NetCoreAppCurrentBuildSettings>

    <!-- Reset these properties back to blank, since they are defaulted by Microsoft.NET.Sdk -->
    <WarningsAsErrors Condition="'$(WarningsAsErrors)' == 'NU1605'" />
    <IsNETCoreAppSrc Condition="'$(IsNETCoreAppSrc)' == '' and
                                '$(IsSourceProject)' == 'true' and
                                $(NetCoreAppLibrary.Contains('$(AssemblyName);'))">true</IsNETCoreAppSrc>
    <IsNETCoreAppRef Condition="'$(IsNETCoreAppRef)' == '' and
                                '$(IsReferenceAssembly)' == 'true' and
                                $(NetCoreAppLibrary.Contains('$(AssemblyName);'))">true</IsNETCoreAppRef>
  </PropertyGroup>

  <!-- Libraries-specific binplacing properties -->
  <PropertyGroup>
    <IsRuntimeAssembly Condition="'$(IsRuntimeAssembly)'=='' and '$(IsReferenceAssembly)' != 'true' and '$(BinPlaceRef)' != 'true' and '$(IsGeneratorProject)' != 'true' and '$(IsTestProject)' != 'true' and '$(IsTestSupportProject)' != 'true'">true</IsRuntimeAssembly>
    <!-- Try to determine if this is a simple library without a ref project.
         https://github.com/dotnet/runtime/issues/19584 is tracking cleaning this up -->
    <IsRuntimeAndReferenceAssembly Condition="'$(IsRuntimeAndReferenceAssembly)' == '' and '$(IsRuntimeAssembly)' == 'true' and Exists('$(LibrariesProjectRoot)$(MSBuildProjectName)') and !Exists('$(LibrariesProjectRoot)$(MSBuildProjectName)/ref') and !$(MSBuildProjectName.StartsWith('System.Private'))">true</IsRuntimeAndReferenceAssembly>

    <BinPlaceRef Condition="'$(BinPlaceRef)' == '' and ('$(IsReferenceAssembly)' == 'true' or '$(IsRuntimeAndReferenceAssembly)' == 'true')">true</BinPlaceRef>
    <BinPlaceRuntime Condition="'$(BinPlaceRuntime)' == '' and ('$(IsRuntimeAssembly)' == 'true' or '$(IsRuntimeAndReferenceAssembly)' == 'true')">true</BinPlaceRuntime>
    <BinPlaceForTargetVertical Condition="'$(BinPlaceForTargetVertical)' == ''">true</BinPlaceForTargetVertical>
    <GetBinPlaceItemsDependsOn Condition="$(MSBuildProjectName.StartsWith('Microsoft.Extensions.'))">$(GetBinPlaceItemsDependsOn);AddDocumentationFileAsBinPlaceItemForExtensionsProjects</GetBinPlaceItemsDependsOn>
  </PropertyGroup>

  <Target Name="AddDocumentationFileAsBinPlaceItemForExtensionsProjects" Condition="Exists('$(DocumentationFile)')">
    <ItemGroup>
      <!-- Microsoft.Extensions are not yet using the doc-file package -->
      <BinPlaceItem Include="$(DocumentationFile)" />
    </ItemGroup>
  </Target>

  <ItemGroup Condition="'@(BinPlaceTargetFrameworks)' == ''">
    <!-- binplace to directories for the target vertical -->
    <BinPlaceTargetFrameworks Include="$(NetCoreAppCurrent)-$(TargetOS)" Condition="'$(BinPlaceForTargetVertical)' == 'true'">
      <NativePath>$(NetCoreAppCurrentRuntimePath)</NativePath>
      <RefPath>$(NetCoreAppCurrentRefPath)</RefPath>
      <RuntimePath>$(NetCoreAppCurrentRuntimePath)</RuntimePath>
    </BinPlaceTargetFrameworks>

    <BinPlaceDir Include="$(MicrosoftNetCoreAppRefPackDir)analyzers\dotnet\$(AnalyzerLanguage)" Condition="'$(IsNETCoreAppAnalyzer)' == 'true'" />

    <!-- Setup the shared framework directory for testing -->
    <BinPlaceTargetFrameworks Include="$(NetCoreAppCurrent)-$(TargetOS)" Condition="'$(BuildTargetFramework)' == '$(NetCoreAppCurrent)' or '$(BuildTargetFramework)' == ''">
      <NativePath >$(NetCoreAppCurrentTestHostSharedFrameworkPath)</NativePath>
      <RuntimePath Condition="'$(IsNETCoreAppSrc)' == 'true'">$(NetCoreAppCurrentTestHostSharedFrameworkPath)</RuntimePath>
    </BinPlaceTargetFrameworks>

    <!-- Microsoft.NetCore.App.Ref and Microsoft.NetCore.App.Runtime targeting packs -->
    <BinPlaceTargetFrameworks Include="$(NetCoreAppCurrent)-$(TargetOS)">
      <NativePath>$(MicrosoftNetCoreAppRuntimePackNativeDir)</NativePath>
      <RefPath Condition="'$(IsNETCoreAppRef)' == 'true'">$(MicrosoftNetCoreAppRefPackRefDir)</RefPath>
      <RuntimePath Condition="'$(IsNETCoreAppSrc)' == 'true'">$(MicrosoftNetCoreAppRuntimePackRidLibTfmDir)</RuntimePath>
    </BinPlaceTargetFrameworks>

    <BinPlaceTargetFrameworks Include="@(AdditionalBinPlaceTargetFrameworks)" />
  </ItemGroup>

  <Import Project="$(RepositoryEngineeringRoot)Packaging.targets" Condition="'$(IsPackable)' == 'true'" />

  <Target Name="SetGenApiProperties" BeforeTargets="GenerateReferenceAssemblySource">
    <PropertyGroup>
      <_ExcludeAPIList>$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', '..', 'ref', 'ReferenceSourceExcludeApi.txt'))</_ExcludeAPIList>
      <_ExcludeAttributesList>$(RepositoryEngineeringRoot)DefaultGenApiDocIds.txt</_ExcludeAttributesList>
      <_LicenseHeaderTxtPath>$(RepositoryEngineeringRoot)LicenseHeader.txt</_LicenseHeaderTxtPath>
      <GenAPITargetPath>$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', '..', 'ref', '$(AssemblyName).cs'))</GenAPITargetPath>
      <GenAPIAdditionalParameters>$(GenAPIAdditionalParameters) --exclude-attributes-list "$(_ExcludeAttributesList)"</GenAPIAdditionalParameters>
      <GenAPIAdditionalParameters Condition="Exists('$(_ExcludeAPIList)')">$(GenAPIAdditionalParameters) --exclude-api-list "$(_ExcludeAPIList)"</GenAPIAdditionalParameters>
      <GenAPIAdditionalParameters>$(GenAPIAdditionalParameters) --header-file "$(_LicenseHeaderTxtPath)"</GenAPIAdditionalParameters>
      <GenAPIAdditionalParameters Condition="'$(LangVersion)' != ''">$(GenAPIAdditionalParameters) --lang-version "$(LangVersion)"</GenAPIAdditionalParameters>
      <GenAPIAdditionalParameters Condition="'%(ProjectReference.Identity)' == '$(CoreLibProject)'">$(GenAPIAdditionalParameters) --follow-type-forwards</GenAPIAdditionalParameters>
    </PropertyGroup>
  </Target>

  <!--
    Do not clean binplace assets in the ref targeting pack to avoid incremental build failures
    when the SDK tries to resolve the assets from the FrameworkList.
  -->
  <Target Name="RemoveTargetingPackIncrementalClean" Condition="'@(AdditionalCleanDirectories)' != ''" BeforeTargets="IncrementalCleanAdditionalDirectories;
                         CleanAdditionalDirectories">
    <ItemGroup>
      <AdditionalCleanDirectories Remove="@(AdditionalCleanDirectories)" Condition="'%(Identity)' == '$(MicrosoftNetCoreAppRefPackRefDir)'" />
    </ItemGroup>
  </Target>

  <!-- Adds RoslynExtensions to gen builds. -->
  <ItemGroup Condition="'$(IsGeneratorProject)'== 'true'">
    <Compile Include="$(SharedSourceDir)Microsoft\CodeAnalysis\RoslynExtensions.cs" Link="Microsoft\CodeAnalysis\RoslynExtensions.cs" />
  </ItemGroup>

  <!-- Adds IsExternalInit to gen builds. -->
  <ItemGroup Condition="'$(LangVersion)'== 'latest'">
    <Compile Include="$(SharedSourceDir)System\Runtime\CompilerServices\IsExternalInit.cs" Link="System\Runtime\CompilerServices\IsExternalInit.cs" />
  </ItemGroup>

  <PropertyGroup>
    <BuildAnalyzerReferences>$(BuildProjectReferences)</BuildAnalyzerReferences>
    <BuildAnalyzerReferences Condition="'$(BuildingInsideVisualStudio)' == 'true'">false</BuildAnalyzerReferences>
  </PropertyGroup>

  <ItemGroup>
    <!-- Ensure AnalyzerReference items are restored and built
         The target framework of Analyzers has no relationship to that of the refrencing project,
         so we don't apply TargetFramework filters nor do we pass in TargetFramework.
         When BuildProjectReferences=false we make sure to set BuildReference=false to make
         sure not to try to call GetTargetPath in the outerbuild of the analyzer project. -->
    <ProjectReference Include="@(AnalyzerReference)" SkipGetTargetFrameworkProperties="true" UndefineProperties="TargetFramework" ReferenceOutputAssembly="false" PrivateAssets="all" BuildReference="$(BuildAnalyzerReferences)" />
  </ItemGroup>

  <Target Name="GetAnalyzerPackFiles" DependsOnTargets="$(GenerateNuspecDependsOn)" Returns="@(_AnalyzerPackFile)">
    <PropertyGroup>
      <_analyzerPath>analyzers/dotnet</_analyzerPath>
      <_analyzerPath Condition="'$(AnalyzerRoslynVersion)' != ''">$(_analyzerPath)/roslyn$(AnalyzerRoslynVersion)</_analyzerPath>
      <_analyzerPath Condition="'$(AnalyzerLanguage)' != ''">$(_analyzerPath)/$(AnalyzerLanguage)</_analyzerPath>
    </PropertyGroup>
    <ItemGroup>
      <_AnalyzerPackFile Include="@(_BuildOutputInPackage)" IsSymbol="false" />
      <_AnalyzerPackFile Include="@(_TargetPathsToSymbols)" IsSymbol="true" />
      <_AnalyzerPackFile PackagePath="$(_analyzerPath)/%(TargetPath)" />
    </ItemGroup>
    <Error Condition="'%(_AnalyzerPackFile.TargetFramework)' != 'netstandard2.0'" Text="Analyzers must only target netstandard2.0 since they run in the compiler which targets netstandard2.0. The following files were found to target '%(_AnalyzerPackFile.TargetFramework)': @(_AnalyzerPackFile)" />
  </Target>
</Project>
